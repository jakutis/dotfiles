#!/usr/bin/env bash

COMMAND="$1"
if [ -z "$BASEURL" ]
then
  echo "BASEURL undefined"
  exit 1
fi
if [ -z "$BASICAUTH" ]
then
  echo "BASICAUTH undefined"
  exit 1
fi
AUTHORIZATION="Basic $(echo -n "$BASICAUTH" | base64)"

function encode_uri_component {
  echo -n "$1"|node -e 'var b=[];process.stdin.on("data",data=>b.push(data));process.stdin.on("end", () => process.stdout.write(encodeURIComponent(Buffer.concat(b).toString())))'
}

function encode_path {
  tr '/' '\n'|echo -n "$(while read LINE; do encode_uri_component "$LINE"; echo; done)"|tr '\n' '/'
}

function full_url {
  FILE="$(echo "$1" | encode_path)"
  echo -n "$BASEURL/$FILE"
}

function custom_curl {
  curl --header "Connection: close" --no-keepalive --fail-early --silent --anyauth --fail --header "Authorization: $AUTHORIZATION" "$@" || exit 1
}

function dav_exists {
  FILE="$1"
  CODE=$(custom_curl --write-out "%{http_code}" --request HEAD "$(full_url "$FILE")")
  if [ "$CODE" = "200" ]
  then
    echo "yes"
  elif [ "$CODE" = "400" -o "$CODE" = "404" ]
  then
    echo "no"
  else
    echo "existence checking "$FILE" returned http status code: $CODE" 1>&2
    exit 1
  fi
}

function dav_mkdir {
  FILE="$1"
  CODE=$(custom_curl --write-out "%{http_code}" --request MKCOL "$(full_url "$FILE")")
  if [ "$CODE" != "200" -a "$CODE" != "201" ]
  then
    echo "creating directory "$FILE" returned http status code: $CODE" 1>&2
    exit 1
  fi
}

function dav_move {
  SOURCE="$1"
  DESTINATION="$2"
  CODE=$(custom_curl --write-out "%{http_code}" --request MOVE --header "Destination: $BASEURL/$DESTINATION" "$(full_url "$SOURCE")")
  if [ "$CODE" != "201" ]
  then
    echo "moving "$SOURCE" to "$DESTINATION" returned http status code: $CODE" 1>&2
    exit 1
  fi
}

function dav_upload {
  FILESOURCE="$1"
  FILEDESTINATION="$2"
  CODE=$(pv "$FILESOURCE" | custom_curl --write-out "%{http_code}" --upload-file - "$(full_url "$FILEDESTINATION")")
  if [ "$CODE" != "200" -a "$CODE" != "201" -a "$CODE" != "204" ]
  then
    echo "uploading file "$FILEDESTINATION" from "$FILESOURCE" returned http status code: $CODE" 1>&2
    exit 1
  fi
}

function dav_download {
  FILE="$1"
  custom_curl --request GET "$(full_url "$FILE")" || exit 1
}

function execute_done {
  touch "done" || exit 1
  echo "executing scripts"
  tail --lines=+$(($(cat "done"|wc -l) + 1)) | while read SCRIPT
  do
    echo "$SCRIPT" && (echo "$SCRIPT" | bash) && (echo "$SCRIPT" >> "done") || exit 1
  done || exit 1
}

if [ "$(cat "root")" != "So, I am like a slave of this root file system!" ]
then
  echo "current directory must be slave" 1>&2
  exit 1
fi
if [ "$(dav_download "root")" != "Well, it is true that I am the master of root file system!" ]
then
  echo "destination must be master" 1>&2
  exit 1
fi

if [ "$COMMAND" = "send" ]
then
  dav_download "done" | execute_done || exit 1

  echo "sending updates"
  find -L . -print0 | while IFS= read -r -d '' FILE
  do
    EXISTS=$(dav_exists "$FILE") || exit 1
    if [ "$EXISTS" = "yes" ]
    then
      echo "found $FILE"
      continue
    fi

    if [ -d "$FILE" ]
    then
      echo "creating $FILE"
      dav_mkdir "$FILE" || exit 1
    else
      echo "copying $FILE"
      dav_upload "$FILE" "$FILE" || exit 1
    fi
  done || exit 1
elif [ "$COMMAND" = "mkdir" ]
then
  DOLOCALLY="$2"
  DIR="$3"
  echo "reading /done"
  DONE="$(dav_download "done")$(echo -e "\nmkdir -p \"$DIR\"")"
  if [ "$DOLOCALLY" = "true" ]
  then
    echo "$DONE" | execute_done || exit 1
  fi
  echo "making $DIR" && dav_mkdir "$DIR" && echo "writing /done" && dav_upload <(echo "$DONE") "done" || exit 1
elif [ "$COMMAND" = "mv" ]
then
  DOLOCALLY="$2"
  SOURCE="$3"
  DESTINATION="$4"
  echo "reading /done"
  DONE="$(dav_download "done")$(echo -e "\nif [ -e \"$SOURCE\" ];then mv \"$SOURCE\" \"$DESTINATION\" || exit 1;fi")"
  if [ "$DOLOCALLY" = "true" ]
  then
    echo "$DONE" | execute_done || exit 1
  fi
  echo "moving $SOURCE to $DESTINATION" && dav_move "$SOURCE" "$DESTINATION" && echo "writing /done" && dav_upload <(echo "$DONE") "done" || exit 1
else
  echo "unknown command: $COMMAND" 1>&2
  exit 1
fi

echo removing empty directories
find . -depth -type d -empty -delete || exit 1

echo "done: $COMMAND"
