#!/usr/bin/env bash

COMMAND="$1"
if [ -z "$BASEURL" ]
then
  echo "BASEURL undefined"
  exit 1
fi
if [ -z "$BASICAUTH" ]
then
  echo "BASICAUTH undefined"
  exit 1
fi
AUTHORIZATION="Basic $(echo -n "$BASICAUTH" | base64)"

function encode_uri_component {
  echo -n "$1"|node -e 'var b=[];process.stdin.on("data",data=>b.push(data));process.stdin.on("end", () => process.stdout.write(encodeURIComponent(Buffer.concat(b).toString())))'
}

function encode_path {
  tr '/' '\n'|echo -n "$(while read LINE; do encode_uri_component "$LINE"; echo; done)"|tr '\n' '/'
}

function full_url {
  FILE="$(echo "$1" | encode_path)"
  echo -n "$BASEURL/$FILE"
}

function custom_curl {
  curl --header "Connection: close" --no-keepalive --fail-early --silent --anyauth --fail --header "Authorization: $AUTHORIZATION" "$@" || exit 1
}

function dav_exists {
  FILE="$1"
  CODE=$(custom_curl --write-out "%{http_code}" --request HEAD "$(full_url "$FILE")")
  if [ "$CODE" = "200" ]
  then
    echo "yes"
  elif [ "$CODE" = "400" -o "$CODE" = "404" ]
  then
    echo "no"
  else
    echo "existence checking "$FILE" returned http status code: $CODE" 1>&2
    exit 1
  fi
}

function dav_delete {
  FILE="$1"
  CODE=$(custom_curl --write-out "%{http_code}" --request DELETE "$(full_url "$FILE")")
  if [ "$CODE" != "200" -a "$CODE" != "201" -a "$CODE" != "204" ]
  then
    echo "deleting "$FILE" returned http status code: $CODE" 1>&2
    exit 1
  fi
}

function dav_mkdir {
  FILE="$1"
  CODE=$(custom_curl --write-out "%{http_code}" --request MKCOL "$(full_url "$FILE")")
  if [ "$CODE" != "200" -a "$CODE" != "201" ]
  then
    echo "creating directory "$FILE" returned http status code: $CODE" 1>&2
    exit 1
  fi
}

function dav_move {
  SOURCE="$1"
  DESTINATION="$2"
  CODE=$(custom_curl --write-out "%{http_code}" --request MOVE --header "Destination: $BASEURL/$DESTINATION" "$(full_url "$SOURCE")")
  if [ "$CODE" != "201" ]
  then
    echo "moving "$SOURCE" to "$DESTINATION" returned http status code: $CODE" 1>&2
    exit 1
  fi
}

function dav_upload {
  FILESOURCE="$1"
  FILEDESTINATION="$2"
  TRY="$3"
  if [ -z "$TRY" ]
  then
    TRY="1"
  fi
  CODE=$(pv "$FILESOURCE" | custom_curl --write-out "%{http_code}" --upload-file - "$(full_url "$FILEDESTINATION")")
  if [ "$CODE" != "200" -a "$CODE" != "201" -a "$CODE" != "204" ]
  then
    if [ "$TRY" = "3" ]
    then
      echo "uploading file "$FILEDESTINATION" from "$FILESOURCE" returned http status code: $CODE" 1>&2
      exit 1
    else
      echo "try #${TRY} failed, trying again"
      dav_upload "$FILESOURCE" "$FILEDESTINATION" "$((TRY + 1))"
    fi
  fi
}

function dav_download {
  FILE="$1"
  custom_curl --request GET "$(full_url "$FILE")" || exit 1
}

ORIGINAL_DIR="$(pwd)"

while [ "$(cat "root" 2>/dev/null)" != "So, I am like a slave of this root file system!" ]
do
  if [ "$(pwd)" = "/" ]
  then
    echo "current directory must be slave" 1>&2
    exit 1
  fi
  cd ..
done
if [ "$(dav_download "root")" != "Well, it is true that I am the master of root file system!" ]
then
  echo "destination must be master" 1>&2
  exit 1
fi

if [ "$COMMAND" = "send" ]
then
  while [ -n "$2" ]
  do
    shift
    echo "sending $1"
    WHAT="$(realpath "$ORIGINAL_DIR/${1}")"
    ROOT_DIR="$(realpath .)"
    find -L "$WHAT" -print0 | while IFS= read -r -d '' FILE
    do
      FILE=".${FILE:${#ROOT_DIR}}"
      EXISTS=$(dav_exists "$FILE") || exit 1
      if [ "$EXISTS" = "yes" ]
      then
        echo "found $FILE"
        continue
      fi

      if [ -d "$FILE" ]
      then
        echo "creating $FILE"
        dav_mkdir "$FILE" || exit 1
      else
        echo "copying $FILE"
        dav_upload "$FILE" "$FILE" || exit 1
      fi
    done || exit 1
  done
elif [ "$COMMAND" = "list" ]
then
  ROOT_DIR="$(realpath .)"
  FULL_PATH="$(realpath --canonicalize-missing "$ORIGINAL_DIR/${2}")"
  RELATIVE_PATH=".${FULL_PATH:${#ROOT_DIR}}"

  function urldecode() { : "${*//+/ }"; echo -e "${_//%/\\x}"; }
  function remove_prefix {
    echo "${1#"$2"}"
  }
  function remove_suffix {
    echo "${1%"$2"}"
  }

  echo "listing $RELATIVE_PATH"
  PROPS=$(custom_curl --request PROPFIND "$(full_url "$RELATIVE_PATH")") || exit 1
  FOLDERS=$(echo "$PROPS"|xmlstarlet sel -T -t -v '//d:response[count(.//d:collection) > 0]//d:href' - && echo) || exit 1
  CURRENT=$(urldecode "$(echo "$FOLDERS"|head -n1)") || exit 1
  if [ -z "$CURRENT" ]
  then
    SIZE=$(custom_curl -I --request HEAD "$(full_url "$RELATIVE_PATH")" | grep -i Content-Length|sed -e 's/.*Content-Length: \([0-9]*\).*/\1/g')
    if [ -z "$SIZE" ]
    then
      echo "error: file not found" 1>&2
      exit 1
    fi
    echo file of size $SIZE bytes
  else
    FOLDERS=$(echo "$FOLDERS"|tail -n +2|while read A; do remove_suffix "$(remove_prefix "$(urldecode "$A")" "$CURRENT")" "/";done) || exit 1
    FILES=$( (echo "$PROPS"|xmlstarlet sel -T -t -v '//d:response[count(.//d:collection) = 0]//d:href' - && echo)|while read A; do remove_prefix "$(urldecode "$A")" "$CURRENT";done) || exit 1
    echo folders:
    if [ -n "$FOLDERS" ]
    then
      echo "$FOLDERS"|while read F
      do
        echo "- $F"
      done
    fi
    echo files:
    if [ -n "$FILES" ]
    then
      echo "$FILES"|while read F
      do
        echo "- $F"
      done
    fi
  fi
elif [ "$COMMAND" = "receive" ]
then
  ROOT_DIR="$(realpath .)"
  UNFINISHED_FILES=$(mktemp --tmpdir="$ROOT_DIR" unfinished-files.XXXXXXXXXX)

  function cleanup {
    cat "$UNFINISHED_FILES" | while read F
    do
      if [ -e "$F" ]
      then
        echo "removing incompletely received $(cat "$F")"
        rm -f "$(cat "$F")"
        rm -f "$F"
      fi
    done
    rm -f "$UNFINISHED_FILES"
  }
  trap cleanup EXIT

  function urldecode() { : "${*//+/ }"; echo -e "${_//%/\\x}"; }
  function remove_prefix {
    echo "${1#"$2"}"
  }
  function remove_suffix {
    echo "${1%"$2"}"
  }
  function receive {
    local RPATH=$1
    local SIZE=$2
    echo "receiving $RPATH"
    if [ -f "$RPATH" ]
    then
      return
    fi
    local CURRENT
    local PROPS
    local FOLDERS
    local FIRST_SIZE
    if [ -z "$SIZE" ]
    then
      PROPS=$(custom_curl --request PROPFIND "$(full_url "$RPATH")") || (echo error: path not found;exit 1) || exit 1
      FOLDERS=$(echo "$PROPS"|xmlstarlet sel -T -t -v '//d:response[count(.//d:collection) > 0]//d:href' - && echo)
      FIRST_SIZE=$(echo "$PROPS"|xmlstarlet sel -T -t -v '//d:getcontentlength' -)
      CURRENT=$(urldecode "$(echo "$FOLDERS"|head -n1)") || exit 1
    fi
    if [ -z "$CURRENT" ]
    then
      if [ -z "$SIZE" ]
      then
        SIZE=$FIRST_SIZE
      fi
      mkdir -p "$(dirname "$RPATH")" || exit 1
      UNFINISHED_FILE=$(mktemp --tmpdir="$ROOT_DIR" unfinished.XXXXXXXXXX)
      echo "$UNFINISHED_FILE" >> "$UNFINISHED_FILES"
      echo "$RPATH" > "$UNFINISHED_FILE"
      custom_curl --request GET "$(full_url "$RPATH")" | pv --size "$SIZE" > "$RPATH" || exit 1
      rm "$UNFINISHED_FILE"
    else
      local FOLDERS=$(echo "$FOLDERS"|tail -n +2|while read A; do remove_suffix "$(remove_prefix "$(urldecode "$A")" "$CURRENT")" "/";done) || exit 1
      local FILES=$( (echo "$PROPS"|xmlstarlet sel -T -t -v '//d:response[count(.//d:collection) = 0]//d:href' - && echo)|sed -e '/^$/d'|while read A; do remove_prefix "$(urldecode "$A")" "$CURRENT";done) || exit 1
      if [ -n "$FOLDERS" ]
      then
        echo "$FOLDERS"|while read FOLDER
        do
          receive "$RPATH/$FOLDER" || exit 1
        done || exit 1
      fi

      if [ -n "$FILES" ]
      then
        readarray -t SIZES <<< "$(echo "$PROPS"|xmlstarlet sel -T -t -v '//d:response[count(.//d:collection) = 0]//d:getcontentlength' -)"
        local I=0
        echo "$FILES"|while read FILE
        do
          receive "$RPATH/$FILE" "${SIZES[${I}]}" || exit 1
          I=$((I + 1))
        done || exit 1
      fi
    fi
  }

  shift
  while [ -n "$1" ]
  do
    FULL_PATH="$(realpath --canonicalize-missing "$ORIGINAL_DIR/${1}")"
    RELATIVE_PATH=".${FULL_PATH:${#ROOT_DIR}}"
    receive "$RELATIVE_PATH" || exit 1
    shift
  done
elif [ "$COMMAND" = "mkdir" ]
then
  DIR="$2"
  echo "making $DIR" && dav_mkdir "$DIR" || exit 1
elif [ "$COMMAND" = "rm" ]
then
  ROOT_DIR="$(realpath .)"
  FULL_PATH="$(realpath --canonicalize-missing "$ORIGINAL_DIR/${2}")"
  SOURCE=".${FULL_PATH:${#ROOT_DIR}}"
  echo "removing $SOURCE" && dav_delete "$SOURCE" || exit 1
elif [ "$COMMAND" = "mv" ]
then
  SOURCE="$2"
  DESTINATION="$3"
  echo "moving $SOURCE to $DESTINATION" && dav_move "$SOURCE" "$DESTINATION" || exit 1
else
  echo "unknown command: $COMMAND" 1>&2
  exit 1
fi

echo "done: $COMMAND"
