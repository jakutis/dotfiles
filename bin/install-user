#!/usr/bin/env bash

if [ -z "$XDG_CONFIG_HOME" ]
then
  echo "Please set XDG_CONFIG_HOME environment variable" 1>&2
  exit 1
fi

if [ -z "$XDG_DATA_HOME" ]
then
  echo "Please set XDG_DATA_HOME environment variable" 1>&2
  exit 1
fi

set -o verbose
set -o xtrace

LIBUSBMUXDV="c724e70fb52ba45291dc73a2e369c0c5bae0ec2e"
LIBIMOBILEDEVICEV="5a85432719fb3d18027d528f87d2a44b76fd3e12"
USBMUXDV="46bdf3ec90acf3916ee8aba622a7da9da5eb8e06"
IFUSEV="df048a1d07628a6a02ed77a8dc0f64930b78acee"
DOCKERCOMPOSEV="1.17.1"
CALCURSEV="4.1.0"
LIBAVV="11.7"
EMACSV="24.5"
VIMV="8.0.0586"
DOCKERV="1.10.2"
GOMTPFSV="bc7c0f716e3b4ed5610069a55fc00828ebba890b"
VLCLIBDE265V="0.1.7"
CALIBREV="3.11.1"
GHCMODV="5.4.0.0"
DECK2PDFV="RELEASE_0_3_0"
AP4JPLAYERV="8bc872e"
BEANSTALKDV="1.10"
SCONSV="2.4.1"
SERFV="1.3.8"
SUBVERSIONV="1.9.2"
LIBUPNPPV="0.14.1"
UPPLAYV="0.8.5"
BISONVS=("2.1")
XDEBUGTAG="XDEBUG_2_3_3"
PHPZMQV="1.1.2"
HUBV="2.2.3"
SBTV="0.13.11"
SCALAV="2.11.8"
TIGV="2.3.0"
OPAMV="1.2.2"
NGINXV="1.9.12"
MYSQLSERVERVS=("5.1.73" "5.6.22")
PHPVS=("5.5.32" "5.6.18" "7.0.3")
MAVENV="3.5.2"
VAGRANTV="1.8.1"
AUTOMAKEV="1.15"
ALEXV="3.1.4"
HAPPYV="1.19.5"
FIT2TCXV="be16308"
GHCV="7.10.3"
BIBLATEXISO690V="c53bff24b93f3071696209faca0f094369766b15"
PLISTV="1.12"
PLISTCOMMIT="df053ccdbb1cec856aa3a99c836ec6111d727a78"
LIBUSBV="1.0.20"
IDEVICEINSTALLERV="1.1.0"
IDEVICEINSTALLERCOMMIT="7aa87fe71df068e798fe002ac785477d4e22c918"
SYSDIGV="0.1.104"
PDFLIBV="7.0.5p3"
PDFLIBVV="705"
JQV="1.5"
JQCOMMIT="jq-1.5"
RUBYV="2.4.2"
LIBVPXV="1.6.1"
GITV="2.7.1"
MIRALLV="2.1.1"
QTKEYCHAINV="v0.5.0"
FUSETAG="fuse_2_9_5"
FUSEV="2.9.5"
AUTOCONFV="2.69"
GITSHV="0.12"
GLIBCV="2.21"
LLVMV="3.4"
XSLTV="1.1.28"
BIBERV="2.1"
PERLBREWV="0.75"
PERLV="5.22.0"
FAACV="1.28"
MACV="3.99-u4-b5-s7"
LEPTONICAV="1.69"
JBIG2ENCV="0.28"
GRAPHICSMAGICKV="1.3.23"
GRAPHICSMAGICKTAG="GraphicsMagick-1_3_23"
JSONCV="0.12-20140410"
FFMPEGV="3.3.2"
MP4V2PATH="/trunk"
MP4V2REV="$(svnversion -c "$HOME/repos/svn/mp4v2/$MP4V2PATH"|cut -c 3-)"
MP4V2V="$MP4V2V"
ANTV="1.10.1"
NZBGETV="15.0"
PYTHONV="3.6.1"
PYTHONVERSIONFILE="3.6"
QPDFVIEWV="0.4.16"
QPDFVIEWR="qpdfview-$QPDFVIEWV"
CABALINSTALLV="1.22.7.0"
GITANNEXV="5.20150930"
PANDOCV="1.15.0.6"
NEWSBEUTERV="2.9"
NEWSBEUTERCOMMIT="r2.9"
MOSHV="1.2.5"
NODEV="8.9.3"
ERLANGV="18.1.1"
PODCATCHERV="3.1.7"
PODCATCHERCOMMIT="4407f386661b51c968d050c2e12b3059946781b1"
MCABBERV="1.0.2"
SVG2PDFV="301dd48"
RTAG="R-3-2-4"
RV="3.3.1"
GOV="1.9.2"
COLOROUTTAG="v1.2-2"
COLOROUTV="1.1-2"
TMUXV="2.3"
LIBEVENTV="2.1.8"
ELINKSV="3379fc9"
IMAGEMAGICKV="7.0.1-6"
CMUSV="2.7.1"
CMUSCOMMIT="v$CMUSV"

if [ "$ENABLE_GITSH" = "yes" ]
then
    ENABLE_RUBY="yes"
fi

if [ "$ENABLE_UPPLAY" = "yes" ]
then
    ENABLE_LIBUPNPP="yes"
fi

if [ "$ENABLE_SUBVERSION" = "yes" ]
then
    ENABLE_SERF="yes"
fi

if [ "$ENABLE_SERF" = "yes" ]
then
    ENABLE_SCONS="yes"
fi

if [ "$ENABLE_CMUS" = "yes" ]
then
    ENABLE_FFMPEG="yes"
fi

if [ "$ENABLE_FFMPEG" = "yes" ]
then
    ENABLE_LIBVPX="yes"
fi

if [ "$ENABLE_MIRALL" = "yes" ]
then
    ENABLE_QTKEYCHAIN="yes"
fi

DOTFILES="$(cat "$XDG_CONFIG_HOME/dotfiles/dotfiles")"
if [ -z "$DOTFILES" ]
then
    echo "Please create a file "$XDG_CONFIG_HOME/dotfiles/dotfiles" that contains path to the dotfiles directory" 1>&2
    exit 1
fi

MACHINE="$(cat "$XDG_CONFIG_HOME/dotfiles/machine")"
if [ -z "$MACHINE" ]
then
    echo "Please create a file "$XDG_CONFIG_HOME/dotfiles/machine" that contains the name of the current machine" 1>&2
    exit 1
fi

VARIA="$(cat "$XDG_CONFIG_HOME/dotfiles/varia")"
if [ -z "$VARIA" ]
then
    echo "Please create a file "$XDG_CONFIG_HOME/dotfiles/varia" that contains path to the varia directory" 1>&2
    exit 1
fi

cd "$HOME"

ln -s "Dropbox/Apps/PlainText 2/repos-up" ".repos-up"

mkdir --parents "$XDG_DATA_HOME/dotfiles"
mkdir --parents "$XDG_DATA_HOME/applications"
cd "$XDG_DATA_HOME/applications"
for APP in $(ls "$DOTFILES/applications")
do
    ln -nsf "$DOTFILES/applications/$APP"
done
ln -nsf "$DOTFILES/mimeapps.list"
ln -nsf "mimeapps.list" "defaults.list"
cd "$HOME"

mkdir --parents "opt"

mkdir --parents "$XDG_CONFIG_HOME/dotfiles/minidlna.db"
mkdir --parents "$XDG_CONFIG_HOME/dotfiles/minidlna.log"

mkdir --parents ".bin"
ln -nsf "$VARIA/git-D" ".bin/git-D"

pushd .
mkdir --parents "$XDG_CONFIG_HOME/newsbeuter"
cd "$XDG_CONFIG_HOME/newsbeuter"
ln -nsf "$DOTFILES/.newsbeuter/config"
ln -nsf "$VARIA/news.txt" urls
popd

if [ "$MACHINE" = "server" ]
then
  mkdir --parents Desktop/rtorrent
  mkdir --parents .rtorrent.session
fi

mkdir --parents ".cmus"
cd ".cmus"
ln -nsf "$DOTFILES/.cmus/rc"
ln -nsf "$HOME/Dropbox/Apps/Byword/cmus-playlists" "$HOME/.cmus/playlists"
cd ..

mkdir --parents ".elinks"
cd ".elinks"
ln -nsf "$DOTFILES/.elinks/elinks.conf"
cd ..

if [ "$MACHINE" = "laptop" ]
then
    ln -nsf "$VARIA/scanner-pixma" "$XDG_CONFIG_HOME/dotfiles/scanner"
fi

touch .xbindkeys.noauto
for RC in bin .bashrc .profile .bash_aliases .jshintrc .jscsrc .hgrc .Xresources .dircolors .inputrc .mailcap .muttrc .xbindkeysrc .vimcustom .rtorrent.rc .tmux.conf .chktexrc .ctags .nodepackages .screenrc .xinitrc .xsession .asoundrc
do
    ln -nsf "$DOTFILES/$RC"
done
ln -nsf "$DOTFILES/.xinitrc.$MACHINE" ".xinitrc"
ln -nsf "$DOTFILES/.Xmodmap.$MACHINE" ".Xmodmap"
ln -nsf "$DOTFILES/.gitconfig.$MACHINE" ".gitconfig"
ln -nsf "$DOTFILES/.config/awesome.$MACHINE" "$XDG_CONFIG_HOME/awesome"
ln -nsf "$DOTFILES/.config/fontconfig" "$XDG_CONFIG_HOME/fontconfig"
mkdir --parents .mc
mkdir --parents .irssi
mkdir --parents .VirtualBox

function ensure_svn {
    REPO="$1"
    URL="$2"
    if [ ! -e "repos/svn/$REPO" ]
    then
        mkdir -p repos/svn && cd repos/svn && svn co "$URL" "$REPO" && cd ../.. || exit 1
    else
        cd "repos/svn/$REPO" && svn update && cd ../../.. || exit 1
    fi
}

function ensure_git_dir {
    REPO="$1"
    URL="$2"
    if [ ! -e "$REPO" ]
    then
        git clone "$URL" "$REPO" || exit 1
    else
        pushd . && cd "$REPO" && git fetch --all --tags && popd || exit 1
    fi
}

function ensure_git {
    ensure_git_dir "repos/git/$1" "$2"
}

function ensure_hg {
    REPO="$1"
    URL="$2"
    if [ ! -e "repos/hg/$REPO" ]
    then
        mkdir -p repos/hg && cd repos/hg && hg clone "$URL" "$REPO" && cd ../.. || exit 1
    else
        cd "repos/hg/$REPO" && hg pull && cd ../../.. || exit 1
    fi
}

if [ "$ENABLE_GIT" = "yes" -a ! -e "opt/git-$GITV" ]
then
    ensure_git git https://github.com/git/git || exit 1
    cd "repos/git/git" && git co "v$GITV" || exit 1
    make configure && ./configure --prefix="$HOME/opt/git-$GITV" && make prefix="$HOME/opt/git-$GITV" PROFILE=BUILD all doc info && make prefix="$HOME/opt/git-$GITV" PROFILE=BUILD install install-doc install-html install-info || exit 1
    cd "../../.."
    cd opt && ln -nsf "git-$GITV" "git" && cd .. || exit 1
    cd .bin && (for BIN in $(ls "../opt/git/bin/"*); do ln -nsf "$BIN"; done) && cd .. || exit 1
fi

if [ "$ENABLE_SERF" = "yes" -a ! -e "opt/serf-$SERFV" ]
then
    ensure_svn serf https://serf.googlecode.com/svn || exit 1
    ensure_hg scons https://bitbucket.org/scons/scons || exit 1
    (cd "$HOME/repos/svn/serf/tags/$SERFV" && svn export . "$HOME/serf-build") || exit 1
    (cd "$HOME/repos/hg/scons" && hg archive -r "$SCONSV" "$HOME/scons-build") || exit 1
    cd serf-build && SCONS_LIB_DIR="$HOME/scons-build/src/engine" python "$HOME/scons-build/src/script/scons.py" PREFIX="$HOME/opt/serf-$SERFV" install && cd .. || exit 1
    rm -rf serf-build scons-build || exit 1
fi

if [ "$ENABLE_SUBVERSION" = "yes" -a ! -e "opt/subversion-$SUBVERSIONV" ]
then
    svn export "http://svn.apache.org/repos/asf/subversion/tags/${SUBVERSIONV}" "subversion-build" || exit 1
    cd "subversion-build" && ./autogen.sh && LDFLAGS="-Wl,--rpath=$HOME/opt/serf-$SERFV/lib,--enable-new-dtags" ./configure --with-serf="$HOME/opt/serf-$SERFV" --prefix="$HOME/opt/subversion-${SUBVERSIONV}" && make && make install && cd .. && rm -r "subversion-build" || exit 1
    cd opt && ln -nsf "subversion-${SUBVERSIONV}" "subversion" && cd .. || exit 1
fi

if ! [ -e "opt/autoconf-${AUTOCONFV}" ]
then
    curl -L "http://ftp.gnu.org/gnu/autoconf/autoconf-${AUTOCONFV}.tar.xz" | tar Jxf - || exit 1
    cd "autoconf-${AUTOCONFV}" && ./configure --prefix="$HOME/opt/autoconf-${AUTOCONFV}" && make && make install && cd .. && rm -rf "autoconf-${AUTOCONFV}" || exit 1
    cd opt && ln -nsf "autoconf-${AUTOCONFV}" "autoconf" && cd .. || exit 1
    cd .bin && (for BIN in $(ls ../opt/autoconf/bin/*); do ln -nsf "$BIN"; done) && cd .. || exit 1
fi


if [ "$ENABLE_AUTOMAKE" = "yes" -a ! -e "opt/automake-${AUTOMAKEV}" ]
then
    ensure_git automake http://git.savannah.gnu.org/r/automake.git || exit 1
    (cd "repos/git/automake" && git archive --format=tar --prefix=automake-build/ "v$AUTOMAKEV") | tar xf - || exit 1
    cd "automake-build" && ./bootstrap.sh && ./configure --prefix="$HOME/opt/automake-${AUTOMAKEV}" && make && make install && cd .. && rm -rf "automake-build" || exit 1
    cd opt && ln -nsf "automake-${AUTOMAKEV}" "automake" && cd .. || exit 1
    cd .bin && (for BIN in $(ls ../opt/automake/bin/*); do ln -nsf "$BIN"; done) && cd .. || exit 1
fi

if [ "$ENABLE_LLVM" = "yes" -a ! -e "opt/llvm-${LLVMV}" ]
then
    curl -L "http://llvm.org/releases/${LLVMV}/llvm-${LLVMV}.src.tar.gz" | tar zxf - || exit 1
    curl -L "http://llvm.org/releases/${LLVMV}/clang-${LLVMV}.src.tar.gz" | tar zxf - || exit 1
    mv "clang-${LLVMV}" "llvm-${LLVMV}/tools/clang"
    cd "llvm-${LLVMV}"
    CC="$(which gcc)" CXX="$(which g++)" ./configure --enable-optimized --enable-shared --prefix="$HOME/opt/llvm-${LLVMV}" && make && make install || exit 1
    cd ..
    rm -rf "llvm-${LLVMV}"
    cd opt
    ln -nsf "llvm-${LLVMV}" "llvm"
    cd ..
fi

if [ "$ENABLE_GLIBC" = "yes" -a ! -e "opt/glibc-$GLIBCV" ]
then
    curl -L "http://ftp.gnu.org/gnu/glibc/glibc-${GLIBCV}.tar.xz" | tar Jxf - || exit 1
    mkdir "glibc-build"
    cd "glibc-build"
    "../glibc-${GLIBCV}/configure" --prefix="$HOME/opt/glibc-${GLIBCV}" && make && make install || exit 1
    cd ..
    rm -rf "glibc-build" "glibc-${GLIBCV}"
    cd opt
    ln -nsf "glibc-${GLIBCV}" "glibc"
    cd ..
fi

for BISONV in "${BISONVS[@]}"
do
    if ! [ -e "opt/bison-$BISONV" ]
    then
        curl -L "https://ftp.gnu.org/gnu/bison/bison-${BISONV}.tar.bz2" | tar jxf - || exit 1
        cd "bison-$BISONV" && ./configure --prefix="$HOME/opt/bison-$BISONV" && make && make install && cd .. && rm -rf bison-$BISONV || exit 1
    fi
done

if [ "$ENABLE_EMACS" = "yes" ]
then
    ensure_git_dir .emacs.d https://github.com/syl20bnr/spacemacs
fi

if [ "$ENABLE_PHP" = "yes" ]
then
    ensure_git php-version https://github.com/wilmoore/php-version || exit 1
    (cd opt && rm -rf php-version && (cd "../repos/git/php-version" && git archive --format=tar --prefix="php-version/" master) | tar xf -) || exit 1
    mkdir --parents .phps || exit 1

    ensure_git php-build https://github.com/CHH/php-build || exit 1
    (cd "repos/git/php-build" && git archive --format=tar --prefix="php-build-build/" master) | tar xf - || exit 1
    rm -rf opt/php-build && cd php-build-build && PREFIX="$HOME/opt/php-build" ./install.sh && cd .. && rm -rf php-build-build || exit 1
    cd .bin && ln -nsf "../opt/php-build/bin/php-build" && cd .. || exit 1

    ensure_git php https://github.com/php/php-src.git || exit 1
    for PHPV in "${PHPVS[@]}"
    do
        if ! [ -e "opt/php-$PHPV" ]
        then
            (cd "repos/git/php" && git archive --format=tar --prefix="$PHPV/" "php-$PHPV") > "$HOME/php-build.tar" || exit 1
            echo "
    cd \$TMP/source && tar xf "$HOME/php-build.tar" && cd "$PHPV" && ./buildconf --copy --force && ./genfiles && build_package || exit 1
    install_pyrus
    enable_builtin_opcache
    " > "opt/php-build/share/php-build/definitions/$PHPV"
            PHP_BUILD_CONFIGURE_OPTS="--with-openssl --with-pdo-mysql --enable-apc --enable-fpm --enable-zip --enable-mbstring --with-gd --with-zlib --with-curl --enable-fileinfo --with-bz2 --enable-intl --with-mcrypt=shared --with-openssl --enable-exif --with-fpm-user=www-data --with-fpm-group=www-data --with-mysql --enable-pcntl" php-build "$PHPV" "$HOME/opt/php-$PHPV" && cd .phps && ln -nsf "../opt/php-$PHPV" "$PHPV" && cd .. && echo "$PHPV" > .php || exit 1
            rm "$HOME/php-build.tar" || exit 1
            [[ -s "$HOME/opt/php-version/php-version.sh" ]] && source "$HOME/opt/php-version/php-version.sh" && php-version "$(cat "$HOME/.php")" || exit 1

            if ! [ "${PHPV:0:4}" != "5.7." ]
            then
              ensure_git php-zmq https://github.com/mkoppanen/php-zmq || exit 1
              (cd "repos/git/php-zmq" && git archive --format=tar --prefix=php-zmq-build/ "$PHPZMQV") | tar xf - || exit 1
              cd php-zmq-build && phpize && ./configure && make && make install && cd .. && rm -rf php-zmq-build || exit 1

              ensure_git xdebug https://github.com/xdebug/xdebug || exit 1
              (cd "repos/git/xdebug" && git archive --format=tar --prefix=xdebug-build/ "$XDEBUGTAG") | tar xf - || exit 1
              cd xdebug-build && phpize && ./configure --enable-xdebug && make && make install && cd .. && rm -rf xdebug-build || exit 1
            fi
        fi
    done

    curl -L https://getcomposer.org/composer.phar > .bin/composer && chmod +x .bin/composer || exit 1
    if [ -z "$(which phpcs)" ]
    then
        composer global require squizlabs/php_codesniffer:1.5.* || exit 1
    fi
    if [ -z "$(which phpunit)" ]
    then
        composer global require phpunit/phpunit:4.2.* || exit 1
    fi
    if [ -z "$(which phpmd)" ]
    then
        composer global require phpmd/phpmd:2.0.* || exit 1
    fi
    composer global update || exit 1
fi

if [ "$ENABLE_ERLANG" = "yes" ]
then
    curl -L https://raw.githubusercontent.com/yrashk/kerl/master/kerl > .bin/kerl && chmod +x .bin/kerl && kerl update releases || exit 1

    if ! [ -e "opt/erlang-$ERLANGV" ]
    then
        kerl build git https://github.com/erlang/otp.git OTP-$ERLANGV $ERLANGV && kerl install "$ERLANGV" "$HOME/opt/erlang-$ERLANGV" || exit 1
        cd opt && ln -nsf "erlang-$ERLANGV" "erlang" && cd .. || exit 1
    fi
fi

if [ "$ENABLE_NODE" = "yes" ]
then
    if ! [ -e ".nvm" ]
    then
        git clone https://github.com/creationix/nvm .nvm && source .nvm/nvm.sh || exit 1
    else
        cd .nvm && git pull --rebase && cd .. || exit 1
    fi

    if ! [ -e ".nvm/versions/node/v$NODEV" ]
    then
        "$DOTFILES/bin/nodeup" "$NODEV"
    fi
fi

if [ "$ENABLE_IMAGEMAGICK" = "yes" -a ! -e "opt/imagemagick-${IMAGEMAGICKV}" ]
then
    curl -L "http://www.imagemagick.org/download/ImageMagick-${IMAGEMAGICKV}.tar.xz" | tar Jxf - || exit 1
    cd "ImageMagick-${IMAGEMAGICKV}" && ./configure --prefix=${HOME}/opt/imagemagick-${IMAGEMAGICKV} --with-quantum-depth=8 --with-modules --without-perl --with-bzlib --with-x --with-zlib --with-autotrace --without-dps --with-djvu --with-fftw --without-fpx --with-fontconfig --with-freetype --with-gslib --with-gvc --with-jbig --with-jpeg --with-lcms --with-lcms2 --without-openjp2 --with-lqr --with-lzma --with-mupdf --with-openexr --with-pango --with-png --with-rsvg --with-tiff --without-webp --with-wmf --with-xml --disable-hdri --enable-deprecated --enable-opencl --enable-openmp && make && make install || exit 1
    cd ..
    rm -rf "ImageMagick-${IMAGEMAGICKV}"
    cd opt
    ln -nsf "imagemagick-${IMAGEMAGICKV}" "imagemagick"
    cd ../.bin
    for BIN in $(ls "../opt/imagemagick/bin")
    do
        ln -nsf "../opt/imagemagick/bin/${BIN}"
    done
    cd ..
fi

if [ "$ENABLE_GRAPHICSMAGICK" = "yes" -a ! -e "opt/graphicsmagick-${GRAPHICSMAGICKV}" ]
then
    ensure_hg graphicsmagick http://hg.code.sf.net/p/graphicsmagick/code || exit 1
    (cd "$HOME/repos/hg/graphicsmagick" && hg archive -r "$GRAPHICSMAGICKTAG" ../../../graphicsmagick-build) || exit 1
    cd graphicsmagick-build && ./configure --with-png --with-x --with-zlib --with-xml --with-wmf --with-ttf --with-trio --with-tiff --with-lzma --with-lcms2 --without-lcms --with-jp2 --with-jpeg --without-webp --with-jbig --with-gslib --without-fpx --without-dps --with-bzlib --with-quantum-depth=8 --with-modules --with-threads --enable-magick-compat --enable-openmp --prefix="$HOME/opt/graphicsmagick-$GRAPHICSMAGICKV" && make && make install && cd .. && rm -rf graphicsmagick-build || exit 1
fi

if [ "$ENABLE_RUBY" = "yes" ]
then
    if ! [ -e ".rvm" ]
    then
        curl -L https://get.rvm.io | rvm_path="$HOME/.rvm" bash -s stable --ruby="$RUBYV" --autolibs=read-fail || exit 1
    else
        rvm get head || exit 1
    fi
    source .rvm/scripts/rvm

    if ! [ -e ".rvm/rubies/ruby-$RUBYV" ]
    then
        rvm install "$RUBYV" && rvm --default use "$RUBYV" && rvm default || exit 1
        gem install jekyll jekyll-sitemap compass bundle haml rainbow scss-lint || exit 1
        #gem install tilt --version 2.0.6 || exit 1
        #LDFLAGS="-Wl,--rpath=$HOME/opt/graphicsmagick-$GRAPHICSMAGICKV/lib,--enable-new-dtags" CFLAGS="-I$HOME/opt/graphicsmagick-$GRAPHICSMAGICKV/include" CXXFLAGS="-I$HOME/opt/graphicsmagick-$GRAPHICSMAGICKV/include" PKG_CONFIG_PATH="$HOME/opt/graphicsmagick-$GRAPHICSMAGICKV/lib/pkgconfig" gem install jekyll kramdown pdfbeads rmagick iconv hpricot compass travis-lint metaclass blankslate haml bundler lolcat || exit 1
        rvm docs generate-ri || exit 1
    fi
    GEM_DIR=$(rvm gemdir 2>/dev/null)
fi

if [ "$ENABLE_GO" = "yes" ]
then
    if ! [ -e "$GVM_ROOT" ]
    then
        git clone https://github.com/moovweb/gvm "$GVM_ROOT" && mkdir "$GVM_ROOT/logs" && source "$GVM_ROOT/scripts/gvm-default" || exit 1
        export GOROOT_BOOTSTRAP="$HOME/go"
        curl -L https://storage.googleapis.com/golang/go1.5.3.linux-amd64.tar.gz | tar zx || exit 1
    else
        pushd .
        cd "$GVM_ROOT"
        if ! [ -e ".git" ]
        then
            mv git.bak .git
        fi
        git pull --rebase || exit 1
        popd
        source "$GVM_ROOT/scripts/gvm-default" || exit 1
    fi

    if ! [ -e "$GVM_ROOT/gos/go${GOV}" ]
    then
        gvm alias delete default
        gvm install "go${GOV}" && gvm alias create default "go${GOV}" && gvm use default || exit 1
    fi
    rm -rf "$HOME/go"
fi

if [ "$ENABLE_R" = "yes" -a ! -e "opt/r-$RV" ]
then
    svn co "https://svn.r-project.org/R/tags/$RTAG" r-build || exit 1
    cd r-build && ./configure --without-recommended-packages --enable-R-shlib --prefix="$HOME/opt/r-$RV" || exit 1;
    cd src/extra/xz
    patch <<'EOF'
diff -ru vienas/Makefile.in du/Makefile.in
--- vienas/Makefile.in	2016-05-27 18:46:12.674367038 +0300
+++ du/Makefile.in	2016-05-27 18:46:50.717368701 +0300
@@ -58,7 +58,7 @@
 	touch stamp
 
 liblzma.a: $(liblzma_a_OBJECTS)
-	$rm -f $@
+	rm -f $@
 	$(AR) -cr $@ $(liblzma_a_OBJECTS)
 	$(RANLIB) $@
EOF
    cd ../../..
    make && make install && cd .. && rm -rf r-build || exit 1
    cd opt && ln -nsf "r-$RV" "r" && cd .. || exit 1
    cd .bin && ln -nsf "../opt/r-$RV/bin/R" && cd .. || exit 1
    echo 'install.packages(c("gdata", "irr", "outliers", "ggthemes", "Rserve", "gdata", "knitr", "vimcom", "setwidth", "animation", "rgl", "ggplot2", "memisc"), repos=c("http://cran.us.r-project.org", dependencies=TRUE))' | R --no-save || exit 1
    wget "https://github.com/jalvesaq/colorout/releases/download/${COLOROUTTAG}/colorout_${COLOROUTV}.tar.gz" || exit 1
    echo "install.packages(c(\"colorout_${COLOROUTV}.tar.gz\"), type=\"source\", repos=NULL)" | R --no-save || exit 1
    rm colorout_${COLOROUTV}.tar.gz
fi

if [ "$ENABLE_JS" = "yes" -a ! -e "opt/js-1.8.5" ]
then
    curl -L "http://ftp.mozilla.org/pub/mozilla.org/js/js185-1.0.0.tar.gz" | tar zx || exit 1
    cd js-1.8.5/js/src && ./configure --prefix="$HOME/opt/js-1.8.5" && make && make install || exit 1
    cd ../../.. && rm -rf js-1.8.5 || exit 1
fi


if [ "$ENABLE_LIBAV" = "yes" -a ! -e "opt/libav-${LIBAVV}" ]
then
    ensure_git libav https://git.libav.org/libav.git || exit 1
    (cd "repos/git/libav" && git archive --format=tar --prefix=libav-build/ "v$LIBAVV") | tar xf - || exit 1
    (cd libav-build && ./configure --prefix="$HOME/opt/libav-$LIBAVV" && make && make install) || exit 1
    rm -rf libav-build || exit 1
    cd opt && ln -nsf "libav-$LIBAVV" libav && cd .. || exit 1
    cd .bin && ln -nsf "../opt/libav/bin/avconv" && cd .. || exit 1
    cd .bin && ln -nsf "../opt/libav/bin/avplay" && cd .. || exit 1
    cd .bin && ln -nsf "../opt/libav/bin/avprobe" && cd .. || exit 1
fi

if [ "$ENABLE_ANT" = "yes" -a ! -e "opt/apache-ant-$ANTV" ]
then
    wget http://apache.mirror.serveriai.lt//ant/binaries/apache-ant-$ANTV-bin.tar.bz2 || exit 1
    (echo "$(curl https://www.apache.org/dist/ant/binaries/apache-ant-$ANTV-bin.tar.bz2.sha512) apache-ant-$ANTV-bin.tar.bz2"|sha512sum --check) || exit 1
    cat apache-ant-$ANTV-bin.tar.bz2 | tar jxf - || exit 1
    rm apache-ant-$ANTV-bin.tar.bz2 || exit 1
    mv "apache-ant-$ANTV" opt && cd opt && ln -nsf "apache-ant-$ANTV" "apache-ant" || exit 1
    cd ../.bin && ln -nsf "../opt/apache-ant/bin/ant" || exit 1
    cd ..
fi

if [ "$ENABLE_MAVEN" = "yes" -a ! -e "opt/apache-maven-${MAVENV}" ]
then
    cd "${HOME}/opt" || exit 1
    curl -L "https://ftp-stud.hs-esslingen.de/pub/Mirrors/ftp.apache.org/dist/maven/maven-3/${MAVENV}/binaries/apache-maven-${MAVENV}-bin.tar.gz" | tar zxf - || exit 1
    ln -nsf "apache-maven-${MAVENV}" "apache-maven" || exit 1
    cd .. || exit 1
    cd ".bin" && ln -nsf "../opt/apache-maven/bin/mvn" && cd .. || exit 1
fi

if [ "$ENABLE_SCALA" = "yes" -a ! -e "opt/scala-$SCALAV" ]
then
    ensure_git scala https://github.com/scala/scala || exit 1
    git clone repos/git/scala scala-build && cd scala-build && git co "v$SCALAV" && ant && mv build/pack "$HOME/opt/scala-$SCALAV" && cd .. && rm -rf scala-build || exit 1
    cd opt && ln -nsf "scala-$SCALAV" scala && cd .. || exit 1
    for BIN in fsc scala scalac scaladoc scalap
    do
        cd .bin && ln -nsf "../opt/scala/bin/$BIN" "$BIN" && cd .. || exit 1
    done
fi

if [ "$ENABLE_SBT" = "yes" -a ! -e "opt/sbt-$SBTV" ]
then
    ensure_git sbt https://github.com/sbt/sbt || exit 1
    git clone repos/git/sbt sbt-build && cd sbt-build && git co "v$SBTV" && cd .. || exit 1
    cd sbt-build && wget https://repo.typesafe.com/typesafe/ivy-releases/org.scala-sbt/sbt-launch/$SBTV/sbt-launch.jar && java -Xms512M -Xmx1536M -Xss1M -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=256M -jar ./sbt-launch.jar package && mkdir ../opt/sbt-$SBTV && mv ./launch/target/sbt-launch.jar "../opt/sbt-$SBTV/sbt-launch.jar" && cd .. && rm -rf sbt-build || exit 1
    cd opt && ln -nsf "sbt-$SBTV" sbt && cd .. || exit 1
fi

if [ "$ENABLE_HUB" = "yes" -a ! -e "opt/hub-$HUBV" ]
then
    ensure_git hub https://github.com/github/hub || exit 1
    (cd "repos/git/hub" && git archive --format=tar --prefix=hub-build/ "v$HUBV") | tar xf - || exit 1
    cd hub-build && ./script/build && mkdir -p "../opt/hub-$HUBV/bin" && cp hub "../opt/hub-$HUBV/bin" && cd .. && rm -rf hub-build || exit 1
    cd opt && ln -nsf "hub-$HUBV" hub && cd .. || exit 1
    cd .bin && ln -nsf "../opt/hub/bin/hub" "hub" && cd .. || exit 1
fi

if [ "$ENABLE_TIG" = "yes" -a ! -e "opt/tig-$TIGV" ]
then
    ensure_git tig https://github.com/jonas/tig || exit 1
    (cd "repos/git/tig" && git archive --format=tar --prefix=tig-build/ "tig-$TIGV") | tar xf - || exit 1
    cd tig-build && ./autogen.sh && ./configure --prefix="$HOME/opt/tig-$TIGV" && make && make install && cd .. && rm -rf tig-build || exit 1
    cd opt && ln -nsf "tig-$TIGV" tig && cd .. || exit 1
    cd .bin && ln -nsf "../opt/tig/bin/tig" "tig" && cd .. || exit 1
fi

if [ "$ENABLE_NGINX" = "yes" -a ! -e "opt/nginx-$NGINXV" ]
then
    ensure_hg nginx http://hg.nginx.org/nginx || exit 1
    (cd "$HOME/repos/hg/nginx" && hg archive -r "release-$NGINXV" ../../../nginx-build) || exit 1
    cd nginx-build && ./auto/configure --prefix="$HOME/opt/nginx-$NGINXV" --with-http_ssl_module && make && make install && cd .. && rm -rf nginx-build || exit 1
    cd opt && ln -nsf "nginx-$NGINXV" nginx && cd .. || exit 1
    cd .bin && ln -nsf "../opt/nginx/sbin/nginx" nginx && cd .. || exit 1
fi

if [ "$ENABLE_MYSQLSERVER" = "yes" ]
then
    for MYSQLSERVERV in "${MYSQLSERVERVS[@]}"
    do
        TMP="$MYSQLSERVERV"
        MYSQLSERVERMAJORV=${TMP%%.*}
        TMP="${TMP#*.}"
        MYSQLSERVERMINORV=${TMP%%.*}
        if ! [ -e "opt/mysql-server-$MYSQLSERVERV" ]
        then
            if [ ! -e "repos/bzr/mysql-server-${MYSQLSERVERMAJORV}.${MYSQLSERVERMINORV}" ]
            then
                mkdir -p repos/bzr && cd repos/bzr && bzr branch "lp:mysql-server/${MYSQLSERVERMAJORV}.${MYSQLSERVERMINORV}" "mysql-server-${MYSQLSERVERMAJORV}.${MYSQLSERVERMINORV}" && cd ../.. || exit 1
            fi
            (cd "repos/bzr/mysql-server-${MYSQLSERVERMAJORV}.${MYSQLSERVERMINORV}" && bzr export --revision=tag:mysql-$MYSQLSERVERV "$HOME/mysql-server-build") || exit 1
            if [ "${MYSQLSERVERMAJORV}.${MYSQLSERVERMINORV}" = "5.1" ]
            then
                cd mysql-server-build && PATH="$HOME/opt/bison-2.1/bin:$PATH" ./BUILD/autorun.sh && PATH="$HOME/opt/bison-2.1/bin:$PATH" CC="gcc" CXX="gcc" CXXFLAGS="-felide-constructors -fno-exceptions -fno-rtti" ./configure --prefix="$HOME/opt/mysql-server-$MYSQLSERVERV" --with-plugins=all && PATH="$HOME/opt/bison-2.1/bin:$PATH" make && PATH="$HOME/opt/bison-2.1/bin:$PATH" make install && cd .. && rm -rf mysql-server-build || exit 1
            else
                cd mysql-server-build && cmake . -DCMAKE_INSTALL_PREFIX="$HOME/opt/mysql-server-$MYSQLSERVERV" && make && make install && cd .. && rm -rf mysql-server-build || exit 1
            fi
        fi
    done
fi

if [ "$ENABLE_MP4V2" = "yes" -a ! -e "opt/mp4v2-$MP4V2V" ]
then
    if [ ! -e "repos/svn/mp4v2" ]
    then
        mkdir -p repos/svn && cd repos/svn && svn co http://mp4v2.googlecode.com/svn mp4v2 && cd ../.. || exit 1
    fi
    (cd "$HOME/repos/svn/mp4v2$MP4V2PATH" && svn export -r "$MP4V2REV" . "$HOME/mp4v2-build") || exit 1
    cd ./mp4v2-build && autoreconf -fiv && ./configure --prefix="$HOME/opt/mp4v2-$MP4V2V" && make && make install && cd .. || exit 1
fi

if [ "$ENABLE_FAAC" = "yes" -a ! -e "opt/faac-$FAACV" ]
then
    curl -L "http://optimate.dl.sourceforge.net/project/faac/faac-src/faac-1.28/faac-1.28.tar.gz" | tar zxf - || exit 1
    cd "faac-$FAACV"
    curl -L "https://projects.archlinux.org/svntogit/packages.git/plain/trunk/mp4v2-1.9.patch?h=packages/faac" | patch -p1 || exit 1
    curl -L "https://projects.archlinux.org/svntogit/packages.git/plain/trunk/mp4v2-2.0.0.patch?h=packages/faac" | patch -p0 || exit 1
    curl -L "https://projects.archlinux.org/svntogit/packages.git/plain/trunk/altivec.patch?h=packages/faac" | patch -p0 || exit 1
    ./bootstrap && CFLAGS="-I$HOME/opt/mp4v2-$MP4V2V/include" LDFLAGS="-lmp4v2 -Wl,--rpath=$HOME/opt/mp4v2-$MP4V2V/lib,--enable-new-dtags -L$HOME/opt/mp4v2-$MP4V2V/lib" ./configure --prefix="$HOME/opt/faac-$FAACV" --with-mp4v2 && make && make install || exit 1
    cd ..
    rm -rf "faac-$FAACV"
    cd .bin
    ln -nsf "../opt/faac-$FAACV/bin/faac"
    cd ..
fi

if [ "$ENABLE_LIBVPX" = "yes" -a ! -e "opt/libvpx-$LIBVPXV" ]
then
    ensure_git libvpx https://chromium.googlesource.com/webm/libvpx || exit 1
    (cd "repos/git/libvpx" && git archive --format=tar --prefix=libvpx-build/ "v$LIBVPXV") | tar xf - || exit 1
    cd libvpx-build && ./configure --enable-shared --enable-static --disable-runtime-cpu-detect --enable-multithread --enable-vp9-postproc --enable-postproc --enable-vp9 --enable-vp8 --disable-internal-stats --disable-unit-tests --disable-docs --disable-examples --enable-libs --disable-install-docs --enable-install-bins --enable-install-libs --enable-install-srcs --cpu=native --enable-optimizations --enable-pic --disable-ccache --disable-debug --disable-gprof --disable-gcov --prefix="$HOME/opt/libvpx-$LIBVPXV" && make && make install && cd .. && rm -r libvpx-build || exit 1
    cd opt && ln -nsf "libvpx-$LIBVPXV" "libvpx" && cd .. || exit 1
fi

if [ "$ENABLE_FFMPEG" = "yes" -a ! -e "opt/ffmpeg-$FFMPEGV" ]
then
    ensure_git ffmpeg http://git.videolan.org/git/ffmpeg.git || exit 1
    (cd "repos/git/ffmpeg" && git archive --format=tar --prefix=ffmpeg-build/ "n$FFMPEGV") | tar xf - || exit 1
    cd ffmpeg-build && ./configure --extra-ldflags="-Wl,--rpath=$HOME/opt/ffmpeg-$FFMPEGV/lib,--enable-new-dtags -lvpx -Wl,--rpath=$HOME/opt/libvpx-$LIBVPXV/lib,--enable-new-dtags -L$HOME/opt/libvpx-$LIBVPXV/lib" --cpu=host --enable-openssl --disable-runtime-cpudetect --prefix="$HOME/opt/ffmpeg-$FFMPEGV" --enable-shared --enable-nonfree --enable-gpl --enable-static --enable-pic --enable-vaapi --extra-cflags="-fPIC -DPIC -I$HOME/opt/libvpx-$LIBVPXV/include" --enable-version3 --extra-cxxflags="-fPIC -DPIC -I$HOME/opt/libvpx-$LIBVPXV/include" --enable-libvpx --enable-libvorbis && make && make install && cd .. || exit 1
    rm -rf ffmpeg-build
    cd opt && ln -nsf "ffmpeg-$FFMPEGV" "ffmpeg" && cd .. || exit 1
    cd .bin && (for BIN in $(ls ../opt/ffmpeg/bin/*); do ln -nsf "$BIN"; done) && cd .. || exit 1
fi

if [ "$ENABLE_CMUS" = "yes" ! -e "opt/cmus-$CMUSV" ]
then
    ensure_git cmus https://github.com/cmus/cmus || exit 1
    (cd "repos/git/cmus" && git archive --format=tar --prefix=cmus-build/ "$CMUSCOMMIT") | tar xf - || exit 1
    cd cmus-build && CFLAGS="-I$HOME/opt/mp4v2-$MP4V2V/include" LDFLAGS="-Wl,--rpath=$HOME/opt/ffmpeg-$FFMPEGV/lib,--enable-new-dtags -lmp4v2 -Wl,--rpath=$HOME/opt/mp4v2-$MP4V2V/lib,--enable-new-dtags -L$HOME/opt/mp4v2-$MP4V2V/lib" PKG_CONFIG_PATH="$HOME/opt/ffmpeg-$FFMPEGV/lib/pkgconfig" ./configure CONFIG_CDDB=n CONFIG_CDIO=n CONFIG_DISCID=n CONFIG_FLAC=y CONFIG_MAD=y CONFIG_MODPLUG=n CONFIG_MIKMOD=n CONFIG_MPC=n CONFIG_VORBIS=y CONFIG_TREMOR=n CONFIG_WAV=y CONFIG_WAVPACK=y CONFIG_MP4=y CONFIG_AAC=y CONFIG_FFMPEG=y CONFIG_CUE=y CONFIG_ROAR=n CONFIG_PULSE=y CONFIG_ALSA=y CONFIG_AO=n CONFIG_ARTS=n CONFIG_OSS=n CONFIG_SUN=n CONFIG_WAVEOUT=n USE_FALLBACK_IP=y CONFIG_AO=n prefix="$HOME/opt/cmus-$CMUSV" && make && make install && cd .. && rm -rf cmus-build || exit 1
    cd opt && ln -nsf "cmus-$CMUSV" "cmus" && cd .. || exit 1
    cd .bin && ln -nsf "../opt/cmus/bin/cmus" && cd .. || exit 1
fi

if [ "$ENABLE_ELINKS" = "yes" -a ! -e "opt/elinks-$ELINKSV" ]
then
    ensure_git elinks http://elinks.cz/elinks.git || exit 1
    cd "repos/git/elinks" && git co "$ELINKSV" || exit 1
    ./autogen.sh && LDFLAGS="-Wl,--rpath=$HOME/opt/js-1.8.5/lib,--enable-new-dtags" PKG_CONFIG_PATH="$HOME/opt/js-1.8.5/lib/pkgconfig" ./configure --prefix="$HOME/opt/elinks-$ELINKSV" --enable-sm-scripting --without-lua --without-ruby --without-perl --without-python && make && make install || exit 1
    cd ../../.. || exit 1
    cd opt && ln -nsf "elinks-$ELINKSV" elinks && cd .. || exit 1
    cd .bin && ln -nsf "../opt/elinks/bin/elinks" && cd .. || exit 1
fi

if [ "$ENABLE_LIBEVENT" = "yes" -a ! -e "opt/libevent-$LIBEVENTV" ]
then
    curl -L "https://github.com/libevent/libevent/releases/download/release-$LIBEVENTV-stable/libevent-$LIBEVENTV-stable.tar.gz" | tar zxf -
    cd "libevent-$LIBEVENTV-stable"
    ./configure --prefix="$HOME/opt/libevent-$LIBEVENTV" && make && make install || exit 1
    cd ..
    rm -rf "libevent-$LIBEVENTV-stable"
fi

if [ "$ENABLE_TMUX" = "yes" -a ! -e "opt/tmux-$TMUXV" ]
then
    curl -L "https://github.com/tmux/tmux/releases/download/${TMUXV}/tmux-${TMUXV}.tar.gz" | tar zxf -
    cd "tmux-$TMUXV"
    LDFLAGS="-Wl,-rpath,$HOME/opt/libevent-$LIBEVENTV/lib" PKG_CONFIG_PATH="$HOME/opt/libevent-$LIBEVENTV/lib/pkgconfig" ./configure --prefix="$HOME/opt/tmux-$TMUXV" && make && make install || exit 1
    cd ..
    rm -rf "tmux-$TMUXV"
    cd opt
    ln -nsf "tmux-$TMUXV" "tmux"
    cd ../.bin
    ln -nsf "../opt/tmux/bin/tmux"
    cd ..
fi

if [ "$ENABLE_NZBGET" = "yes" -a ! -e "opt/nzbget-$NZBGETV" ]
then
    curl -L "http://sourceforge.net/projects/nzbget/files/nzbget-${NZBGETV}.tar.gz" | tar zxf -
    cd "nzbget-${NZBGETV}"
    ./configure --disable-libpar2-bugfixes-check --prefix="$HOME/opt/nzbget-${NZBGETV}" && make && make install || exit 1
    cd ..
    rm -rf "nzbget-${NZBGETV}"
    cd opt
    ln -nsf "nzbget-${NZBGETV}" "nzbget"
    cd ../.bin
    ln -nsf "../opt/nzbget/bin/nzbget"
    cd ..
fi

if ! [ -e "opt/xwinlogger" ]
then
    curl -L "https://github.com/emilis/xwinlogger/archive/master.tar.gz" | tar zxf -
    mkdir --parents "opt/xwinlogger/lib" "opt/xwinlogger/bin"
    cd "xwinlogger-master"
    INSTALL_DIR="$HOME/opt/xwinlogger/lib" BIN_DIR="$HOME/opt/xwinlogger/bin" ./install.sh || exit 1
    cd ..
    rm -rf "xwinlogger-master"
    cd .bin
    ln -nsf "../opt/xwinlogger/bin/xwinlogger"
    cd ..
fi

if [ "$ENABLE_PODCATCHER" = "yes" -a ! -e "opt/podcatcher-$PODCATCHERV" ]
then
    ensure_git podcatcher https://github.com/doga/podcatcher || exit 1
    (cd "repos/git/podcatcher" && git archive --format=tar --prefix=podcatcher-build/ "$PODCATCHERCOMMIT") | tar xf - || exit 1
    mv podcatcher-build opt/podcatcher-$PODCATCHERV && cd opt && ln -nsf podcatcher-$PODCATCHERV podcatcher && cd .. || exit 1
    cd .bin && ln -nsf ../opt/podcatcher/bin/podcatcher && cd .. || exit 1
fi

if [ "$ENABLE_XSLT" = "yes" -a ! -e "opt/libxslt-$XSLTV" ]
then
    curl -L ftp://xmlsoft.org/libxslt/libxslt-${XSLTV}.tar.gz | tar zxf - || exit 1
    cd "libxslt-$XSLTV"
    ./configure --prefix="$HOME/opt/libxslt-${XSLTV}" && make && make install || exit 1
    cd ../opt
    ln -nsf "libxslt-${XSLTV}" "libxslt"
    cd ../.bin
    ln -nsf "../opt/libxslt/bin/xslt-config"
    ln -nsf "../opt/libxslt/bin/xsltproc"
    cd ..
    rm -rf "libxslt-$XSLTV"
fi

if [ "$ENABLE_FUSE" = "yes" -a ! -e "opt/fuse-$FUSEV" ]
then
    ensure_git fuse https://github.com/libfuse/libfuse || exit 1
    cd "repos/git/fuse" || exit 1
    git co "$FUSETAG" || exit 1
    ./makeconf.sh && ./configure --prefix="$HOME/opt/fuse-$FUSEV" --enable-lib --disable-util --enable-rpath && make && make install || exit 1
    cd "../../.."
    cd "opt" && ln -nsf "fuse-$FUSEV" "fuse" && cd ".."
fi

if [ "$ENABLE_PERL" = "yes" ]
then
    ensure_git App-perlbrew https://github.com/gugod/App-perlbrew || exit 1
    (cd "repos/git/App-perlbrew" && git archive --format=tar --prefix=perlbrew-build/ "release-$PERLBREWV") | tar xf - || exit 1
    bash ./perlbrew-build/perlbrew-install && source "$PERLBREW_ROOT/etc/bashrc" || exit 1
    rm -rf perlbrew-build || exit 1

    if ! [ -e "$PERLBREW_ROOT/perls/perl-$PERLV" ]
    then
        perlbrew install "perl-$PERLV" || exit 1
        perlbrew switch "perl-$PERLV" || exit 1
        perlbrew alias delete default
        perlbrew alias create "perl-$PERLV" default || exit 1

        for PACKAGE in File::Which Readonly::XS
        do
            cpan "$PACKAGE" || exit 1
        done

        curl -L https://github.com/plk/biber/archive/v${BIBERV}.tar.gz|tar zxf - || exit 1
        cd "biber-$BIBERV"
        cpan -f . || exit 1
        cd ..
        rm -rf "biber-$BIBERV"
    fi
fi

if [ "$ENABLE_PYTHON" = "yes" ]
then
    if ! [ -e "$PYENV_ROOT" ]
    then
        git clone https://github.com/yyuu/pyenv "$PYENV_ROOT" || exit 1
        CONFIGURE_OPTS="--enable-shared" pyenv install "$PYTHONV" || exit 1
        eval "$(pyenv init -)" || exit 1
        pyenv shell "$PYTHONV" || exit 1
        pyenv global "$PYTHONV" || exit 1
        for PACKAGE in cython lxml six jsbeautifier pygments python-djvulibre fusepy reportlab term2048 brownie icalendar
        do
            PKG_CONFIG_PATH="$HOME/opt/fuse/lib/pkgconfig" pip install "$PACKAGE" && pyenv rehash || exit 1
        done

        git clone https://github.com/wetneb/pygments_maple && cd pygments_maple && python setup.py install && cd .. && rm -rf pygments_maple || exit 1
    else
        cd "$PYENV_ROOT" && git pull --rebase && cd "$HOME" || exit 1
        eval "$(pyenv init -)" || exit 1
    fi
    pyenv shell "$PYTHONV"
fi

if [ "$ENABLE_HASKELL" = "yes" ]
then
    if ! [ -e "opt/ghc-$GHCV" ]
    then
        ensure_git ghc https://git.haskell.org/ghc.git || exit 1
        ensure_git cabal https://github.com/haskell/cabal || exit 1
        GHCSYSTEMV="$(ghc --numeric-version)"
        if [ "$(echo -e "$GHCSYSTEMV\n7.6.3"|sort --version-sort|head -n 1)" = "$GHCSYSTEMV" ]
        then
            curl -L "https://www.haskell.org/ghc/dist/7.6.3/ghc-7.6.3-$(uname -m)-unknown-linux.tar.bz2" | tar jxf - && cd ghc-7.6.3 && ./configure --prefix="$(pwd)/ghc-7.6.3-temp" && make install && cd .. || exit 1
            export PATH="$(pwd)/ghc-7.6.3/ghc-7.6.3-temp/bin:$PATH"
            echo "Installed temporary ghc-7.6.3"
        fi

        (cd "repos/git/cabal" && git archive --format=tar --prefix=cabal-build/ "cabal-install-v$CABALINSTALLV") | tar xf - || exit 1
        rm -rf .cabal .ghc && cd cabal-build/cabal-install && sh bootstrap.sh && "$HOME/.cabal/bin/cabal" update && cd ../.. && rm -rf cabal-build || exit 1
        echo "Installed temporary cabal-install"

        "$HOME/.cabal/bin/cabal" install happy && "$HOME/.cabal/bin/cabal" install alex || exit 1
        echo "Installed temporary happy and alex"

        GHCREMOTE="$(cd repos/git/ghc && git config --get remote.origin.url)"
        git clone repos/git/ghc ghc-build && cd ghc-build && git remote rm origin && git remote add origin "$GHCREMOTE" && git co "ghc-$GHCV-release" && ./sync-all --no-dph get && ./sync-all checkout -b ghc-$GHCV ghc-$GHCV-release && (echo ".|$(git tag -l "ghc-$GHCV-release" -n9999|tail -n+3|sed -e 's/^    //')" > A && ./utils/fingerprint/fingerprint.py restore -f A && rm A) && PATH="$HOME/.cabal/bin:$PATH" perl boot && PATH="$HOME/.cabal/bin:$PATH" ./configure --prefix="$HOME/opt/ghc-$GHCV" && PATH="$HOME/.cabal/bin:$PATH" make -j3 && PATH="$HOME/.cabal/bin:$PATH" make install && cd .. && rm -rf ghc-build .cabal .ghc ghc-7.6.3 && cd opt && ln -nsf "ghc-$GHCV" ghc && cd .. || exit 1
    fi

    if ! [ -e "opt/cabal-install-$CABALINSTALLV" ]
    then
        (cd "repos/git/cabal" && git archive --format=tar --prefix=cabal-build/ "cabal-install-v$CABALINSTALLV") | tar xf - || exit 1
        cd cabal-build/cabal-install && sh bootstrap.sh && "$HOME/.cabal/bin/cabal" update && cd ../.. && rm -rf cabal-build || exit 1
        mkdir "opt/cabal-install-$CABALINSTALLV" && cd "opt/cabal-install-$CABALINSTALLV" && "$HOME/.cabal/bin/cabal" sandbox init --sandbox . && "$HOME/.cabal/bin/cabal" install "cabal-install==$CABALINSTALLV" && cd ../.. && rm -rf .cabal .ghc || exit 1
        cd .bin && ln -nsf "../opt/cabal-install-$CABALINSTALLV/bin/cabal" && cd .. || exit 1
    fi

    cabal update || exit 1
fi

if [ "$ENABLE_OCAML" = "yes" ]
then
    if ! [ -e "opt/opam-$OPAMV" ]
    then
        ensure_git opam https://github.com/ocaml/opam || exit 1
        (cd "repos/git/opam" && git archive --format=tar --prefix=opam-build/ "$OPAMV") | tar xf - || exit 1
        cd opam-build && ./configure --prefix="$HOME/opt/opam-$OPAMV" && make lib-ext && make && make install && cd .. && rm -rf opam-build || exit 1
        cd opt && ln -nsf "opam-$OPAMV" "opam" && cd .. || exit 1
        cd .bin && ln -nsf "../opt/opam/bin/opam" && cd .. || exit 1
        cd .bin && ln -nsf "../opt/opam/bin/opam-installer" && cd .. || exit 1
        cd .bin && ln -nsf "../opt/opam/bin/opam-admin" && cd .. || exit 1
    fi

    if ! [ -e ".opam" ]
    then
        opam init || exit 1
        for PACKAGE in google-drive-ocamlfuse
        do
            opam install "$PACKAGE" || exit 1
        done
    else
        opam update || exit 1
    fi
fi

if [ "$ENABLE_VIM" = "yes" ]
then
  if [ "0" = "1" -a ! -e "opt/neovim-$NEOVIMV" ]
  then
      ensure_git neovim https://github.com/neovim/neovim || exit 1
      (cd "repos/git/neovim" && git archive --format=tar --prefix=neovim-build/ "$NEOVIMCOMMIT") | tar xf - || exit 1
      cd "neovim-build" && make CMAKE_EXTRA_FLAGS="-DCMAKE_INSTALL_PREFIX:PATH=$HOME/opt/neovim-$NEOVIMV" && make install && cd .. && rm -rf neovim-build || exit 1
      cd .bin || exit 1
      rm -f vi && ln -s "../opt/neovim-$NEOVIMV/bin/nvim" vi || exit 1
      rm -f vim && ln -s "../opt/neovim-$NEOVIMV/bin/nvim" vim || exit 1
      rm -f nvim && ln -s "../opt/neovim-$NEOVIMV/bin/nvim" nvim || exit 1
      rm -f vimdiff && echo 'nvim -d "$@"' > vimdiff && chmod +x vimdiff || exit 1
      cd .. || exit 1
  fi

  if [ ! -e "opt/vim-$VIMV" ]
  then
      ensure_git vim https://github.com/vim/vim || exit 1
      (cd "repos/git/vim" && git archive --format=tar --prefix=vim-build/ "v$VIMV") | tar xf - || exit 1
      cd "vim-build" || exit 1
      ./configure --enable-rubyinterp=yes --enable-pythoninterp=yes --with-features=huge --enable-cscope --prefix="$HOME/opt/vim-$VIMV" && make && make install || exit 1
      cd .. && rm -rf vim-build || exit 1
      cd "$HOME/opt" && ln -nsf "vim-$VIMV" "vim" && cd ../.bin || exit 1
      ln -nsf "../opt/vim/bin/vim"
      ln -nsf "../opt/vim/bin/vimdiff"
      cd ..
  fi

  mkdir --parents .vimtmp .vimbackup .vimsession .vimundo || exit 1
  ln -nsf "$DOTFILES/.vimrc" .vimrc || exit 1

  if [ ! -e ".vim" ]
  then
    curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim || exit 1
    ln -nsf "$DOTFILES/.vimrc" .vim/init.vim || exit 1
    ln -nsf "$(pwd)/.vim" "$XDG_CONFIG_HOME/nvim" || exit 1
  fi
  vim +PlugUpdate +qall || exit 1
fi

if [ "$ENABLE_EMACS" = "yes" -a ! -e "opt/emacs-$EMACSV" ]
then
    ensure_git emacs http://git.savannah.gnu.org/r/emacs.git || exit 1
    (cd "repos/git/emacs" && git archive --format=tar --prefix=emacs-build/ "emacs-$EMACSV") | tar xf - || exit 1
    cd emacs-build && ./autogen.sh all && ./configure --prefix="$HOME/opt/emacs-$EMACSV" && make install && cd .. && rm -rf emacs-build || exit 1
    cd .bin && ln -nsf "../opt/emacs-$EMACSV/bin/emacs" && cd .. || exit 1
fi

if [ "$ENABLE_CTOP" = "yes" ]
then
  curl https://raw.githubusercontent.com/yadutaf/ctop/master/cgroup_top.py > .bin/ctop && chmod +x .bin/ctop || exit 1
fi

if [ "$ENABLE_GITANNEX" = "yes" -a ! -e "opt/git-annex-$GITANNEXV" ]
then
    mkdir -p "opt/git-annex-$GITANNEXV" && cd "opt/git-annex-$GITANNEXV" && cabal sandbox init --sandbox . && cabal install "git-annex==$GITANNEXV" --flags="-s3 -webdav -inotify -dbus -assistant -webapp -webapp-secure -pairing -xmpp dns production -android -androidsplice -testsuite -tdfa -feed -quvi -tahoe -desktopnotify -torrentparser -ekg -network-uri" && cd ../.. || exit 1
    cd .bin && ln -nsf "../opt/git-annex-$GITANNEXV/bin/git-annex" && cd .. || exit 1
    cd .bin && ln -nsf "../opt/git-annex-$GITANNEXV/bin/git-annex" git-annex-shell && cd .. || exit 1
fi

if [ "$ENABLE_ALEX" = "yes" -a ! -e "opt/alex-$ALEXV" ]
then
    mkdir -p "opt/alex-$ALEXV" && cd "opt/alex-$ALEXV" && cabal sandbox init --sandbox . && cabal install "alex==$ALEXV" && cd ../.. || exit 1
    cd .bin && ln -nsf "../opt/alex-$ALEXV/bin/alex" && cd .. || exit 1
fi

if [ "$ENABLE_HAPPY" = "yes" -a ! -e "opt/happy-$HAPPYV" ]
then
    mkdir -p "opt/happy-$HAPPYV" && cd "opt/happy-$HAPPYV" && cabal sandbox init --sandbox . && cabal install "happy==$HAPPYV" && cd ../.. || exit 1
    cd .bin && ln -nsf "../opt/happy-$HAPPYV/bin/happy" && cd .. || exit 1
fi

if [ "$ENABLE_GHCMOD" = "yes" -a ! -e "opt/ghc-mod-$GHCMODV" ]
then
    mkdir -p "opt/ghc-mod-$GHCMODV" && cd "opt/ghc-mod-$GHCMODV" && cabal sandbox init --sandbox . && cabal install "ghc-mod==$GHCMODV" && cd ../.. || exit 1
    cd .bin && ln -nsf "../opt/ghc-mod-$GHCMODV/bin/ghc-mod" && cd .. || exit 1
    cd .bin && ln -nsf "../opt/ghc-mod-$GHCMODV/bin/ghc-modi" && cd .. || exit 1
fi

if [ "$ENABLE_PANDOC" = "yes" -a ! -e "opt/pandoc-$PANDOCV" ]
then
    mkdir -p "opt/pandoc-$PANDOCV" && cd "opt/pandoc-$PANDOCV" && cabal sandbox init --sandbox . && cabal install "pandoc==$PANDOCV" && cd ../.. || exit 1
    cd .bin && ln -nsf "../opt/pandoc-$PANDOCV/bin/pandoc" && cd .. || exit 1
    cd .bin && ln -nsf "../opt/pandoc-$PANDOCV/bin/json2yaml" && cd .. || exit 1
    cd .bin && ln -nsf "../opt/pandoc-$PANDOCV/bin/yaml2json" && cd .. || exit 1
fi

if [ "$ENABLE_YOUTUBEDL" = "yes" ]
then
  if ! [ -e ".bin/youtube-dl" ]
  then
      curl -L https://yt-dl.org/downloads/latest/youtube-dl -o .bin/youtube-dl && chmod +x .bin/youtube-dl || exit 1
  else
      .bin/youtube-dl -U || exit 1
  fi
fi

if [ "$ENABLE_MOSH" = "yes" -a ! -e "opt/mosh-$MOSHV" ]
then
    wget "http://mosh.mit.edu/mosh-${MOSHV}.tar.gz"
    tar xf mosh-$MOSHV.tar.gz
    cd mosh-$MOSHV
    ./configure --prefix=$HOME/opt/mosh-$MOSHV && make && make install || exit 1
    cd ../opt
    ln -nsf mosh-$MOSHV mosh
    cd ..
    rm -rf mosh-$MOSHV mosh-$MOSHV.tar.gz
    cd .bin
    ln -nsf ../opt/mosh/bin/mosh
    ln -nsf ../opt/mosh/bin/mosh-client
    ln -nsf ../opt/mosh/bin/mosh-server
    cd ..
fi

if [ "$ENABLE_JSONC" = "yes" -a ! -e "opt/json-c-$JSONCV" ]
then
    ensure_git json-c https://github.com/json-c/json-c || exit 1
    (cd "repos/git/json-c" && git archive --format=tar --prefix=json-c-build/ "json-c-$JSONCV") | tar xf - || exit 1
    cd json-c-build && CFLAGS="-Wno-error=unused-but-set-variable" ./configure --prefix="$HOME/opt/json-c-$JSONCV" && make && make install && cd .. && rm -rf json-c-build || exit 1
fi

if [ "$ENABLE_BEANSTALKD" = "yes" ! -e "opt/beanstalkd-$BEANSTALKDV" ]
then
    ensure_git beanstalkd https://github.com/kr/beanstalkd || exit 1
    (cd "repos/git/beanstalkd" && git archive --format=tar --prefix=beanstalkd-build/ "v$BEANSTALKDV") | tar xf - || exit 1
    cd beanstalkd-build && make PREFIX="$HOME/opt/beanstalkd-$BEANSTALKDV" install && cd .. && rm -rf beanstalkd-build || exit 1
    cd .bin && ln -nsf ../opt/beanstalkd-$BEANSTALKDV/bin/beanstalkd && cd .. || exit 1
fi

if [ "$ENABLE_JQ" = "yes" -a ! -e "opt/jq-$JQV" ]
then
    ensure_git jq https://github.com/stedolan/jq || exit 1
    cd "repos/git/jq" && git co "$JQCOMMIT" && autoreconf -i && ./configure --prefix="$HOME/opt/jq-$JQV" --disable-maintainer-mode && make && make install && cd ../../..|| exit 1
    cd opt && ln -nsf "jq-$JQV" "jq" && cd .. || exit 1
    cd .bin && (for BIN in $(ls "../opt/jq/bin/"*); do ln -nsf "$BIN"; done) && cd .. || exit 1
fi


if [ ! -e "opt/libusbmuxd-$LIBUSBMUXDV" ]
then
  ensure_git libusbmuxd https://github.com/libimobiledevice/libusbmuxd || exit 1
  (cd "repos/git/libusbmuxd" && git archive --format=tar --prefix=libusbmuxd-build/ "$LIBUSBMUXDV") | tar xf - || exit 1
  cd "libusbmuxd-build" && NOCONFIGURE=yes ./autogen.sh && PKG_CONFIG_PATH="$HOME/opt/libusbmuxd-${LIBUSBMUXDV}/lib/pkgconfig:$HOME/opt/libimobiledevice-${LIBIMOBILEDEVICEV}/lib/pkgconfig:$HOME/opt/usbmuxd-${USBMUXDV}/lib/pkgconfig:$HOME/opt/ifuse-${IFUSEV}/lib/pkgconfig" CFLAGS="-I$HOME/opt/libusbmuxd-${LIBUSBMUXDV}/include -I$HOME/opt/libimobiledevice-${LIBIMOBILEDEVICEV}/include -I$HOME/opt/usbmuxd-${USBMUXDV}/include -I$HOME/opt/ifuse-${IFUSEV}/include" LDFLAGS="-Wl,--rpath=$HOME/opt/libusbmuxd-${LIBUSBMUXDV}/lib,--enable-new-dtags -Wl,--rpath=$HOME/opt/libimobiledevice-${LIBIMOBILEDEVICEV}/lib,--enable-new-dtags -Wl,--rpath=$HOME/opt/usbmuxd-${USBMUXDV}/lib,--enable-new-dtags -Wl,--rpath=$HOME/opt/ifuse-${IFUSEV}/lib,--enable-new-dtags" ./configure --prefix="$HOME/opt/libusbmuxd-${LIBUSBMUXDV}" && make && make install && cd .. && rm -r "libusbmuxd-build" || exit 1
  cd opt && ln -nsf "libusbmuxd-$LIBUSBMUXDV" "libusbmuxd" && cd .. || exit 1
  cd .bin && ln -nsf "../opt/libusbmuxd/bin/iproxy" && cd .. || exit 1
fi

if [ ! -e "opt/libimobiledevice-$LIBIMOBILEDEVICEV" ]
then
  ensure_git libimobiledevice https://github.com/libimobiledevice/libimobiledevice || exit 1
  (cd "repos/git/libimobiledevice" && git archive --format=tar --prefix=libimobiledevice-build/ "$LIBIMOBILEDEVICEV") | tar xf - || exit 1
  cd "libimobiledevice-build" && NOCONFIGURE=yes ./autogen.sh && PKG_CONFIG_PATH="$HOME/opt/libusbmuxd-${LIBUSBMUXDV}/lib/pkgconfig:$HOME/opt/libimobiledevice-${LIBIMOBILEDEVICEV}/lib/pkgconfig:$HOME/opt/usbmuxd-${USBMUXDV}/lib/pkgconfig:$HOME/opt/ifuse-${IFUSEV}/lib/pkgconfig" CFLAGS="-I$HOME/opt/libusbmuxd-${LIBUSBMUXDV}/include -I$HOME/opt/libimobiledevice-${LIBIMOBILEDEVICEV}/include -I$HOME/opt/usbmuxd-${USBMUXDV}/include -I$HOME/opt/ifuse-${IFUSEV}/include" LDFLAGS="-Wl,--rpath=$HOME/opt/libusbmuxd-${LIBUSBMUXDV}/lib,--enable-new-dtags -Wl,--rpath=$HOME/opt/libimobiledevice-${LIBIMOBILEDEVICEV}/lib,--enable-new-dtags -Wl,--rpath=$HOME/opt/usbmuxd-${USBMUXDV}/lib,--enable-new-dtags -Wl,--rpath=$HOME/opt/ifuse-${IFUSEV}/lib,--enable-new-dtags" ./configure --prefix="$HOME/opt/libimobiledevice-${LIBIMOBILEDEVICEV}" && make && make install && cd .. && rm -r "libimobiledevice-build" || exit 1
  cd opt && ln -nsf "libimobiledevice-$LIBIMOBILEDEVICEV" "libimobiledevice" && cd .. || exit 1
  cd .bin && ln -nsf "../opt/libimobiledevice/bin/idevicepair" && cd .. || exit 1
fi

if [ ! -e "opt/usbmuxd-$USBMUXDV" ]
then
  ensure_git usbmuxd https://github.com/libimobiledevice/usbmuxd || exit 1
  (cd "repos/git/usbmuxd" && git archive --format=tar --prefix=usbmuxd-build/ "$USBMUXDV") | tar xf - || exit 1
  cd "usbmuxd-build" && NOCONFIGURE=yes ./autogen.sh && CC=clang CXX=clang++ PKG_CONFIG_PATH="$HOME/opt/libusbmuxd-${LIBUSBMUXDV}/lib/pkgconfig:$HOME/opt/libimobiledevice-${LIBIMOBILEDEVICEV}/lib/pkgconfig:$HOME/opt/usbmuxd-${USBMUXDV}/lib/pkgconfig:$HOME/opt/ifuse-${IFUSEV}/lib/pkgconfig:$PKG_CONFIG_PATH" CFLAGS="-I$HOME/opt/libusbmuxd-${LIBUSBMUXDV}/include -I$HOME/opt/libimobiledevice-${LIBIMOBILEDEVICEV}/include -I$HOME/opt/usbmuxd-${USBMUXDV}/include -I$HOME/opt/ifuse-${IFUSEV}/include" LDFLAGS="-Wl,--rpath=$HOME/opt/libusbmuxd-${LIBUSBMUXDV}/lib,--enable-new-dtags -Wl,--rpath=$HOME/opt/libimobiledevice-${LIBIMOBILEDEVICEV}/lib,--enable-new-dtags -Wl,--rpath=$HOME/opt/usbmuxd-${USBMUXDV}/lib,--enable-new-dtags -Wl,--rpath=$HOME/opt/ifuse-${IFUSEV}/lib,--enable-new-dtags" ./configure --prefix="$HOME/opt/usbmuxd-${USBMUXDV}" && make && make install && cd .. && rm -r "usbmuxd-build" || exit 1
  cd opt && ln -nsf "usbmuxd-$USBMUXDV" "usbmuxd" && cd .. || exit 1
  cd .bin && ln -nsf "../opt/usbmuxd/sbin/usbmuxd" && cd .. || exit 1
fi

if [ ! -e "opt/ifuse-$IFUSEV" ]
then
  ensure_git ifuse https://github.com/libimobiledevice/ifuse || exit 1
  (cd "repos/git/ifuse" && git archive --format=tar --prefix=ifuse-build/ "$IFUSEV") | tar xf - || exit 1
  cd "ifuse-build" && NOCONFIGURE=yes ./autogen.sh && PKG_CONFIG_PATH="$HOME/opt/libusbmuxd-${LIBUSBMUXDV}/lib/pkgconfig:$HOME/opt/libimobiledevice-${LIBIMOBILEDEVICEV}/lib/pkgconfig:$HOME/opt/usbmuxd-${USBMUXDV}/lib/pkgconfig:$HOME/opt/ifuse-${IFUSEV}/lib/pkgconfig" CFLAGS="-I$HOME/opt/libusbmuxd-${LIBUSBMUXDV}/include -I$HOME/opt/libimobiledevice-${LIBIMOBILEDEVICEV}/include -I$HOME/opt/usbmuxd-${USBMUXDV}/include -I$HOME/opt/ifuse-${IFUSEV}/include" LDFLAGS="-Wl,--rpath=$HOME/opt/libusbmuxd-${LIBUSBMUXDV}/lib,--enable-new-dtags -Wl,--rpath=$HOME/opt/libimobiledevice-${LIBIMOBILEDEVICEV}/lib,--enable-new-dtags -Wl,--rpath=$HOME/opt/usbmuxd-${USBMUXDV}/lib,--enable-new-dtags -Wl,--rpath=$HOME/opt/ifuse-${IFUSEV}/lib,--enable-new-dtags" ./configure --prefix="$HOME/opt/ifuse-${IFUSEV}" && make && make install && cd .. && rm -r "ifuse-build" || exit 1
  cd opt && ln -nsf "ifuse-$IFUSEV" "ifuse" && cd .. || exit 1
  cd .bin && ln -nsf "../opt/ifuse/bin/ifuse" && cd .. || exit 1
fi

if [ "$ENABLE_NEWSBEUTER" = "yes" -a ! -e "opt/newsbeuter-$NEWSBEUTERV" ]
then
    ensure_git newsbeuter https://github.com/akrennmair/newsbeuter || exit 1
    (cd "repos/git/newsbeuter" && git archive --format=tar --prefix=newsbeuter-build/ "$NEWSBEUTERCOMMIT") | tar xf - || exit 1
    cd newsbeuter-build && LDFLAGS="-Wl,--rpath=$HOME/opt/json-c-$JSONCV/lib,--enable-new-dtags" PKG_CONFIG_PATH="$HOME/opt/json-c-$JSONCV/lib/pkgconfig" ./config.sh && make "prefix=$HOME/opt/newsbeuter-$NEWSBEUTERV" && make "prefix=$HOME/opt/newsbeuter-$NEWSBEUTERV" install && cd .. && rm -rf newsbeuter-build || exit 1

    cd "opt"
    ln -nsf "newsbeuter-$NEWSBEUTERV" "newsbeuter"
    cd "../.bin"
    ln -nsf ../opt/newsbeuter/bin/newsbeuter
    cd ".."
fi

if [ "$ENABLE_QPDFVIEW" = "yes" -a ! -e "opt/qpdfview-$QPDFVIEWV" ]
then
    if [ ! -e "repos/bzr/qpdfview" ]
    then
        mkdir -p repos/bzr && cd repos/bzr && bzr branch http://bazaar.launchpad.net/~adamreichold/qpdfview/trunk qpdfview && cd ../.. || exit 1
    fi
    cd "$HOME/repos/bzr/qpdfview" || exit 1
    bzr revert -r "$QPDFVIEWR" && bzr clean-tree --force || exit 1
    sed --in-place "s/\/usr/$(echo "$HOME/opt/qpdfview-$QPDFVIEWV/usr"|sed -e 's/[]\/()$*.^|[]/\\&/g')/" qpdfview.pri
    qmake && make && make install || exit 1
    cd "$HOME/opt"
    ln -nsf qpdfview-$QPDFVIEWV qpdfview
    cd ../.bin
    ln -nsf ../opt/qpdfview-$QPDFVIEWV/usr/bin/qpdfview
    cd ..
fi

if [ "$ENABLE_MCABBER" = "yes" -a ! -e "opt/mcabber-$MCABBERV" ]
then
    curl -L "http://mcabber.com/files/mcabber-${MCABBERV}.tar.bz2" | tar jxf -
    cd mcabber-$MCABBERV
    ./configure --prefix=$HOME/opt/mcabber-$MCABBERV && make && make install || exit 1
    cd ../opt
    ln -nsf mcabber-$MCABBERV mcabber
    cd ../.bin
    ln -nsf ../opt/mcabber/bin/mcabber
    cd ..
    rm -rf mcabber-$MCABBERV
fi

if [ "$ENABLE_MAC" = "yes" -a ! -e "opt/mac-$MACV" ]
then
    curl -L "http://www.etree.org/shnutils/shntool/support/formats/ape/unix/$MACV/mac-$MACV.tar.gz" | tar zxf - || exit 1
    cd "mac-$MACV"
    ./configure --prefix="$HOME/opt/mac-$MACV" && make && make install || exit 1
    cd ..
    rm -rf "mac-$MACV"
    cd .bin
    ln -nsf "../opt/mac-$MACV/bin/mac" "mac"
    cd ..
fi

if [ "$ENABLE_SVG2PDF" = "yes" -a ! -e "opt/svg2pdf-$SVG2PDFV" ]
then
    ensure_git svg2pdf git://people.freedesktop.org/~cworth/svg2pdf || exit 1
    (cd "repos/git/svg2pdf" && git archive --format=tar --prefix=svg2pdf-build/ "$SVG2PDFV") | tar xf - || exit 1
    cd svg2pdf-build && make || exit 1
    mkdir "../opt/svg2pdf-$SVG2PDFV"
    cp svg2pdf "../opt/svg2pdf-$SVG2PDFV"
    cd ../opt
    ln -nsf "svg2pdf-$SVG2PDFV" svg2pdf
    cd ../.bin
    ln -nsf "../opt/svg2pdf-$SVG2PDFV/svg2pdf"
    cd ..
    rm -rf "svg2pdf-build"
fi

if ! [ -e ".bin/text2pdf" ]
then
    wget http://www.eprg.org/pdfcorner/text2pdf/text2pdf.c
    gcc -o .bin/text2pdf text2pdf.c
    rm text2pdf.c
fi

if [ "$ENABLE_SFNT2WOFF" = "yes" -a ! -e ".bin/sfnt2woff" -a -e ".bin/woff2sfnt" ]
then
    mkdir sfnt2woff
    cd sfnt2woff
    wget http://people.mozilla.com/~jkew/woff/woff-code-latest.zip
    unzip woff-code-latest.zip
    make || exit 1
    cp woff2sfnt ../.bin
    cp sfnt2woff ../.bin
    cd ..
    rm -rf sfnt2woff
fi

if [ "$ENABLE_MUTTICS" = "yes" -a ! -e ".bin/mutt-ics" ]
then
    cd "$HOME/opt"
    git clone https://github.com/dmedvinsky/mutt-ics || exit 1
    cd mutt-ics
    pip install -r requirements.txt || exit 1
    cd ../../.bin
    ln -s ../opt/mutt-ics/bin/mutt-ics mutt-ics
    cd ..
fi

if [ "$ENABLE_LEPTONICA" = "yes" -a ! -e "opt/leptonica-$LEPTONICAV" ]
then
    pushd .
    curl -L "http://leptonica.googlecode.com/files/leptonica-${LEPTONICAV}.tar.bz2" | tar jxf - && cd "leptonica-$LEPTONICAV" || exit 1
    ./configure --with-libtiff --without-giflib --with-jpeg --with-libpng --with-zlib --enable-programs --prefix=$HOME/opt/leptonica-$LEPTONICAV && make && make install || exit 1
    cd ..
    rm -rf "leptonica-$LEPTONICAV"
    popd
fi

if [ "$ENABLE_JBIG2ENC" = "yes" -a ! -e "opt/jbig2enc-$JBIG2ENCV" ]
then
    ensure_git jbig2enc https://github.com/agl/jbig2enc || exit 1
    pushd .
    cd "repos/git/jbig2enc" && git co "$JBIG2ENCV" && ./autogen.sh || exit 1
    LDFLAGS="-L$HOME/opt/leptonica-$LEPTONICAV/lib -Wl,--rpath=$HOME/opt/leptonica-$LEPTONICAV/lib,--enable-new-dtags" CPPFLAGS="-I$HOME/opt/leptonica-$LEPTONICAV/include" ./configure --prefix=$HOME/opt/jbig2enc-$JBIG2ENCV && make && make install || exit 1
    cd "$HOME/opt"
    ln -nsf "jbig2enc-$JBIG2ENCV" "jbig2enc"
    cd ../.bin
    ln -nsf "../opt/jbig2enc/bin/jbig2"
    popd
fi

if [ "$ENABLE_GITSH" = "yes" -a ! -e "opt/gitsh-$GITSHV" ]
then
    ensure_git gitsh https://github.com/thoughtbot/gitsh || exit 1
    (cd "repos/git/gitsh" && git archive --format=tar --prefix=gitsh-build/ "v$GITSHV") | tar xf - || exit 1
    cd gitsh-build && bundle install && ./autogen.sh && RUBY="$(which ruby)" ./configure --prefix="$HOME/opt/gitsh-$GITSHV" && make && make install && cd .. && rm -rf gitsh-build || exit 1
    cd opt && ln -nsf "gitsh-${GITSHV}" "gitsh" && cd .. || exit 1
    cd .bin && ln -nsf "../opt/gitsh/bin/gitsh" && cd .. || exit 1
fi

if [ "$ENABLE_PDFLIB" = "yes" -a ! -e "opt/pdflib-lite-$PDFLIBV" ]
then
    curl -L "http://www.pdflib.com/binaries/PDFlib/${PDFLIBVV}/PDFlib-Lite-${PDFLIBV}.tar.gz" | tar zxf - || exit 1
    cd "PDFlib-Lite-${PDFLIBV}" && ./configure --prefix="$HOME/opt/pdflib-lite-${PDFLIBV}" && make && make install && cd .. && rm -rf "PDFlib-Lite-${PDFLIBV}" || exit 1
    cd "opt" && ln -nsf "pdflib-lite-${PDFLIBV}" "pdflib-lite" && cd .. || exit 1
    cd ".bin" && (for BIN in $(ls "../opt/pdflib-lite/bin/"*); do ln -nsf "$BIN"; done) && cd .. || exit 1
fi

if [ "$ENABLE_SYSDIG" = "yes" -a ! -e "opt/sysdig-$SYSDIGV" ]
then
    ensure_git sysdig https://github.com/draios/sysdig || exit 1
    (cd "repos/git/sysdig" && git archive --format=tar --prefix=sysdig-build/ "$SYSDIGV") | tar xf - || exit 1
    cd sysdig-build && mkdir build && cd build && cmake -DCMAKE_INSTALL_PREFIX:PATH="$HOME/opt/sysdig-$SYSDIGV" .. && make && make install && cd ../.. && rm -rf sysdig-build || exit 1
    cd opt && ln -nsf "sysdig-$SYSDIGV" "sysdig" && cd .. || exit 1
    cd "opt/sysdig/src/sysdig-0.1.1-dev/" && make && cd ../../../.. || exit 1
    cd .bin && ln -nsf "../opt/sysdig/bin/sysdig" && cd .. || exit 1
fi

if [ "$ENABLE_QTKEYCHAIN" = "yes" -a ! -e "opt/qtkeychain-$QTKEYCHAINV" ]
then
    ensure_git qtkeychain https://github.com/frankosterfeld/qtkeychain || exit 1
    cd "repos/git/qtkeychain" && git clean -fxd . && git reset --hard && git co "$QTKEYCHAINV" || exit 1
    DIR="$(mktemp --directory)"
    cd "$DIR" || exit 1
    echo "Build directory: $(pwd)"
    cmake -DCMAKE_INSTALL_PREFIX:PATH="$HOME/opt/qtkeychain-$QTKEYCHAINV" -DQT_TRANSLATIONS_DIR:PATH="$HOME/opt/qtkeychain-$QTKEYCHAINV/share/qt/translations" "$HOME/repos/git/qtkeychain" && make all install || exit 1
    cd "$HOME" && rm -rf "$DIR"
    cd "$HOME/opt/qtkeychain-$QTKEYCHAINV/include" && ln -nsf "qt5keychain" "qtkeychain" && cd "$HOME" || exit 1
fi

if [ "$ENABLE_MIRALL" = "yes" -a ! -e "opt/mirall-$MIRALLV" ]
then
    ensure_git mirall https://github.com/owncloud/mirall || exit 1
    cd "repos/git/mirall" && git co "v$MIRALLV" || exit 1
    DIR="$(mktemp --directory)"
    cd "$DIR" || exit 1
    echo "Build directory: $(pwd)"
    QTKEYCHAINSO="$HOME/opt/qtkeychain-$QTKEYCHAINV/lib/x86_64-linux-gnu/libqtkeychain.so"
    if [ ! -e "$QTKEYCHAINSO" ]
    then
        QTKEYCHAINSO="$HOME/opt/qtkeychain-$QTKEYCHAINV/lib64/libqt5keychain.so"
    fi
    cmake -DCMAKE_INSTALL_PREFIX:PATH="$HOME/opt/mirall-$MIRALLV" -DQTKEYCHAIN_INCLUDE_DIR="$HOME/opt/qtkeychain-$QTKEYCHAINV/include" -DQTKEYCHAIN_LIBRARY="$QTKEYCHAINSO" "$HOME/repos/git/mirall" && make all install || exit 1
    cd "$HOME" && rm -rf "$DIR"
    cd .bin && echo "LD_LIBRARY_PATH=\"\$HOME/opt/mirall-$MIRALLV/lib:\$HOME/opt/qtkeychain-$QTKEYCHAINV/lib/x86_64-linux-gnu\" \"\$HOME/opt/mirall-$MIRALLV/bin/owncloud\"" > owncloud && chmod +x owncloud && cd ..
    cd .bin && echo "LD_LIBRARY_PATH=\"\$HOME/opt/mirall-$MIRALLV/lib:\$HOME/opt/qtkeychain-$QTKEYCHAINV/lib/x86_64-linux-gnu\" \"\$HOME/opt/mirall-$MIRALLV/bin/owncloudcmd\"" > owncloudcmd && chmod +x owncloudcmd && cd ..
fi

if [ "$ENABLE_BIBLATEXISO690" = "yes" -a [ ! -e "texmf/tex/latex/biblatex-iso690" -o "$(cat texmf/tex/latex/biblatex-iso690/VERSION)" != "$BIBLATEXISO690V" ]]
then
    (mkdir -p texmf/tex/latex && cd texmf/tex/latex && rm -rf biblatex-iso690 && curl -L https://github.com/michal-h21/biblatex-iso690/archive/${BIBLATEXISO690V}.tar.gz | tar zxf - && mv biblatex-iso690-${BIBLATEXISO690V} biblatex-iso690 && echo ${BIBLATEXISO690V} > biblatex-iso690/VERSION) || exit 1
fi

if ! [ -e "texmf/tex/latex/polyglossia" ]
then
    mkdir -p "texmf" && cd "texmf" && curl -L http://mirrors.ctan.org/install/macros/latex/contrib/polyglossia.tds.zip | bsdtar -xvf- && cd .. || exit 1
fi

if [ "$ENABLE_FIT2TCX" = "yes" -a ! -e "opt/fit2tcx-$FIT2TCXV" ]
then
    ensure_git Fit2Tcx https://github.com/adiesner/Fit2Tcx || exit 1
    (cd "repos/git/Fit2Tcx" && git archive --format=tar --prefix=fit2tcx-build/ "$FIT2TCXV") | tar xf - || exit 1
    cd fit2tcx-build && ./configure && make && mkdir -p "$HOME/opt/fit2tcx-$FIT2TCXV/bin" && cp "fit2tcx" "$HOME/opt/fit2tcx-$FIT2TCXV/bin" && cd .. && rm -rf "fit2tcx-build" || exit 1
    cd .bin && ln -nsf "../opt/fit2tcx-$FIT2TCXV/bin/fit2tcx" && cd .. || exit 1
fi

if [ "$ENABLE_VAGRANT" = "yes" -a ! -e "$GEM_DIR/gems/vagrant-$VAGRANTV" ]
then
    ensure_git vagrant https://github.com/mitchellh/vagrant || exit 1
    (cd "repos/git/vagrant" && git archive --format=tar --prefix=vagrant-build/ "v$VAGRANTV") | tar xf - || exit 1
    cd vagrant-build && bundle install && rake install && cd .. && rm -rf vagrant-build || exit 1
    vagrant plugin install vagrant-hostsupdater || exit 1
fi

if [ "$ENABLE_LIBUPNPP" = "yes" -a ! -e "opt/libupnppv-$LIBUPNPPV" ]
then
    ensure_git libupnpp https://github.com/medoc92/libupnpp || exit 1
    (cd "repos/git/libupnpp" && git archive --format=tar --prefix=libupnpp-build/ "libupnpp-v$LIBUPNPPV") | tar xf - || exit 1
    cd libupnpp-build && ./autogen.sh && ./configure --prefix="$HOME/opt/libupnpp-$LIBUPNPPV" && make && make install && cd .. && rm -rf libupnpp-build || exit 1
fi

if [ "$ENABLE_VLC_LIBDE265" = "yes" -a ! -e "$HOME/.local/share/vlc/plugins/libde265/$VLCLIBDE265V" ]
then
    ensure_git vlc-libde265 https://github.com/strukturag/vlc-libde265 || exit 1
    (cd "repos/git/vlc-libde265" && git archive --format=tar --prefix=vlc-libde265-build/ "$VLCLIBDE265V") | tar xf - || exit 1
    cd vlc-libde265-build && ./autogen.sh && ./configure --prefix="$HOME/.local/share/vlc/plugins" && make && make install && cd .. && rm -rf vlc-libde265-build || exit 1
    pushd . && cd $HOME/.local/share/vlc/plugins && touch "lib/$VLCLIBDE265V" && mv lib libde265 && popd || exit 1
fi

if [ "$ENABLE_UPPLAY" = "yes" -a ! -e "opt/upplay-$UPPLAYV" ]
then
    ensure_git upplay https://github.com/medoc92/upplay || exit 1
    (cd "repos/git/upplay" && git archive --format=tar --prefix=upplay-build/ "UPPLAY_$UPPLAYV") | tar xf - || exit 1
    cd upplay-build && qmake-qt4 PREFIX="$HOME/opt/upplay-$UPPLAYV" INCLUDEPATH="$HOME/opt/libupnpp-$LIBUPNPPV/include" QMAKE_LFLAGS="-Wl,--rpath=$HOME/opt/libupnpp-$LIBUPNPPV/lib,--enable-new-dtags -L$HOME/opt/libupnpp-$LIBUPNPPV/lib" && make install && cd .. && rm -rf upplay-build || exit 1
    cd opt && ln -nsf "upplay-$UPPLAYV" upplay && cd .. || exit 1
    cd .bin && ln -nsf "../opt/upplay/bin/upplay" && cd .. || exit 1
fi

if [ "$ENABLE_DECK2PDF" = "yes" -a ! -e "opt/deck2pdf-$DECK2PDFV" ]
then
    ensure_git deck2pdf https://github.com/melix/deck2pdf
    (cd "repos/git/deck2pdf" && git archive --format=tar --prefix=deck2pdf-build/ "$DECK2PDFV") | tar xf - || exit 1

    ORIG_PATH="$PATH"
    ORIG_JAVA_HOME="$JAVA_HOME"
    export JAVA_HOME="$HOME/opt/jdk-1.8"
    export PATH="$JAVA_HOME/bin:$PATH"
    cd ./deck2pdf-build && ./gradlew distZip && cd build/distributions && (ZIP=$(ls *);unzip "$ZIP" && mv "$(basename "$ZIP" .zip)" "$HOME/opt/deck2pdf-$DECK2PDFV") && cd ../../.. && rm -rf deck2pdf-build || exit 1
    export PATH="$ORIG_PATH"
    export JAVA_HOME="$ORIG_JAVA_HOME"

    cd opt && ln -nsf "deck2pdf-$DECK2PDFV" deck2pdf && cd .. || exit 1
    cd .bin && ln -nsf "../opt/deck2pdf/bin/deck2pdf" && cd .. || exit 1
fi

if [ "$ENABLE_CALIBRE" = "yes" -a ! -e "opt/calibre-$CALIBREV" ]
then
    cd opt && mkdir calibre-$CALIBREV && ln -nsf calibre-$CALIBREV calibre && cd calibre-$CALIBREV || exit 1
    curl -L http://download.calibre-ebook.com/$CALIBREV/calibre-${CALIBREV}-x86_64.txz | tar Jxf - || exit 1
    cd ../.. || exit 1
    cd .bin && ln -nsf "../opt/calibre/ebook-convert" && cd .. || exit 1
    cd .bin && ln -nsf "../opt/calibre/ebook-viewer" && cd .. || exit 1
fi

if [ "$ENABLE_AP4JPLAYER" = "yes" -a ! -e "opt/ap4jplayer-$AP4JPLAYERV" ]
then
    ensure_git AP4J-Player https://github.com/carsonmcdonald/AP4J-Player
    (cd "repos/git/AP4J-Player" && git archive --format=tar --prefix=ap4jplayer-build/ "$AP4JPLAYERV") | tar xf - || exit 1
    cd ap4jplayer-build/build && ant && mv dist ../../opt/ap4jplayer-$AP4JPLAYERV && cd ../.. && rm -rf ap4jplayer-build || exit 1
    echo '#/usr/bin/env bash' > .bin/ap4jplayer
    echo 'echo ' >> .bin/ap4jplayer
    echo 'echo Open http://localhost:7070/' >> .bin/ap4jplayer
    echo 'echo ' >> .bin/ap4jplayer
    echo "cd \"\$HOME/opt/ap4jplayer-$AP4JPLAYERV\"" >> .bin/ap4jplayer
    echo 'java -jar AP4JPlayer.jar' >> .bin/ap4jplayer
    chmod +x .bin/ap4jplayer
fi

if [ "$ENABLE_GOMTPFS" = "yes" -a ! -e "$HOME/opt/go-mtpfs-$GOMTPFSV" ]
then
    ensure_git go-mtpfs https://github.com/hanwen/go-mtpfs || exit 1
    (cd "repos/git/go-mtpfs" && git archive --format=tar --prefix=go-mtpfs-build/ "$GOMTPFSV") | tar xf - || exit 1
    export GOPATH="$(pwd)/go-mtpfs-gopath"
    cd go-mtpfs-build && go get -d && go build && mv go-mtpfs-build "../opt/go-mtpfs-$GOMTPFSV" && cd .. && rm -rf go-mtpfs-build go-mtpfs-gopath || exit 1
    cd .bin && ln -nsf "../opt/go-mtpfs-$GOMTPFSV" go-mtpfs && cd .. || exit 1
fi

if [ "$ENABLE_DOCKER" = "yes" -a ! -e "$HOME/opt/docker-$DOCKERV" ]
then
    ensure_git docker https://github.com/docker/docker || exit 1
    git clone repos/git/docker docker-build || exit 1
    cd docker-build && git checkout "v$DOCKERV" && make binary && cat bundles/$DOCKERV/binary/docker-$DOCKERV > "$HOME/opt/docker-$DOCKERV" && cd .. && sudo rm -rf docker-build || exit 1
    chmod +x "$HOME/opt/docker-$DOCKERV" || exit 1
    cd .bin && ln -nsf "../opt/docker-$DOCKERV" docker && cd .. || exit 1
fi

if [ "$ENABLE_CALCURSE" = "yes" -a ! -e "opt/calcurse-$CALCURSEV" ]
then
    ensure_git calcurse git://git.calcurse.org/calcurse.git || exit 1
    git clone "repos/git/calcurse" calcurse-build || exit 1
    (eval "$(pyenv init -)" && pyenv install --skip-existing 2.7.12 && pyenv shell 2.7.12 && cd "calcurse-build" && git co "v$CALCURSEV" && ./autogen.sh && ./configure --prefix="$HOME/opt/calcurse-${CALCURSEV}" && make && make install && cd .. && rm -rf "calcurse-build") || exit 1
    cd opt && ln -nsf "calcurse-${CALCURSEV}" "calcurse" && cd .. || exit 1
    cd .bin && (for BIN in $(ls ../opt/calcurse/bin/*); do ln -nsf "$BIN"; done) && cd .. || exit 1
fi

if [ "$ENABLE_DOCKERCOMPOSE" = "yes" ]
then
  curl -L "https://github.com/docker/compose/releases/download/${DOCKERCOMPOSEV}/docker-compose-$(uname -s)-$(uname -m)" -o "${HOME}/.bin/docker-compose"
  chmod +x "${HOME}/.bin/docker-compose"
fi

flatpak install --assumeyes --user https://flathub.org/repo/appstream/com.spotify.Client.flatpakref
echo flatpak run com.spotify.Client > "$HOME/.bin/spotify"
chmod +x "$HOME/.bin/spotify"

#https://www.virag.si/2012/01/web-video-encoding-tutorial-with-ffmpeg-0-9/

