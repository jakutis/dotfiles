#!/usr/bin/env bash

VAGRANTV="1.6.3"
AUTOMAKEV="1.14.1"
ALEXV="3.1.3"
HAPPYV="1.19.4"
FIT2TCXV="ceaa501"
GHCV="7.8.3"
BIBLATEXISO690V="d85dd3ee5d345c4a7a7ecfedb8775b0fff4f0ac8"
PLISTV="1.12"
PLISTCOMMIT="df053ccdbb1cec856aa3a99c836ec6111d727a78"
USBMUXDV="1.0.9"
USBMUXDCOMMIT="c24463ee5f4ebd3cabb279c2a37e35b1777f4dd9"
IMOBILEDEVICEV="1.1.6"
IFUSEV="1.1.3"
LIBUSBV="1.0.18"
IDEVICEINSTALLERV="1.0.1"
IDEVICEINSTALLERCOMMIT="7aa87fe71df068e798fe002ac785477d4e22c918"
SYSDIGV="0.1.85"
PDFLIBV="7.0.5p3"
PDFLIBVV="705"
JQV="1.4"
JQCOMMIT="jq-1.4"
RUBYV="2.1.2"
LIBVPXV="1.3.0"
GITV="2.0.1"
MIRALLV="1.6.1"
QTKEYCHAINV="v0.3.0"
FUSETAG="fuse_2_9_2"
FUSEV="2.9.2"
AUTOCONFV="2.69"
GITSHV="0.4"
GLIBCV="2.19"
LLVMV="3.4"
XSLTV="1.1.28"
BIBERV="1.9"
PERLV="5.20.0"
FAACV="1.28"
MACV="3.99-u4-b5-s7"
LEPTONICAV="1.69"
JBIG2ENCV="0.28"
GRAPHICSMAGICV="1.3.19"
GRAPHICSMAGICTAG="GraphicsMagick-1_3_19"
JSONCV="0.12-20140410"
FFMPEGV="2.3"
MP4V2PATH="/trunk"
MP4V2V="$(svnversion -c "$HOME/repos/svn/mp4v2/$MP4V2PATH"|cut -c 3-)"
ANTV="1.9.3"
NZBGETV="11.0"
PYTHONV="3.4.1"
PYTHONVERSIONFILE="3.4"
PYTHONMAINV="2.7.8"
QPDFVIEWV="0.4.8"
QPDFVIEWR="qpdfview-$QPDFVIEWV"
CABALINSTALLV="1.20.0.3"
GITANNEXV="5.20140709"
PANDOCV="1.12.4.2"
NEWSBEUTERV="5541697"
NEWSBEUTERCOMMIT="5541697"
MOSHV="1.2.4"
NODEV="0.10.29"
ERLANGV="17.1.2"
RTORRENTV="0.9.4"
LIBTORRENTV="0.13.4"
PODCATCHERV="3.1.6"
PODCATCHERURL="http://rubyforge.org/frs/download.php/76053/podcatcher-3.1.6.tar.gz"
MCABBERV="0.10.3"
SVG2PDFV="301dd48"
RMV="3"
RV="${RMV}.1.1"
GOV="1.3"
YOUTUBEDLV="2014.07.15"
VIMV="v7-4-364"
COLOROUTV="1.0-3"
TMUXV="1.9a"
LIBEVENTV="2.0.21"
ELINKSV="3379fc9"
IMAGEMAGICKV="6.8.8-2"
CMUSV="2.5.1"
CMUSCOMMIT="v$CMUSV"

if [ "$ENABLE_FFMPEG" = "yes" ]
then
    ENABLE_LIBVPX="yes"
fi

if [ "$ENABLE_MIRALL" = "yes" ]
then
    ENABLE_QTKEYCHAIN="yes"
fi

DOTFILES="$(realpath "$1")"
VARIA="$(realpath "$2")"

if ! [ -e "$DOTFILES" ]
then
    echo "DOTFILES at "$DOTFILES" does not exist" 1>&2
    exit 1
fi
if ! [ -e "$VARIA" ]
then
    echo "VARIA at "$VARIA" does not exist" 1>&2
    exit 1
fi

cd "$HOME"

mkdir --parents ".varia"

mkdir --parents ".local/share/applications"
cd ".local/share/applications"
for APP in $(ls "$DOTFILES/applications")
do
    ln -nsf "$DOTFILES/applications/$APP"
done
ln -nsf "$DOTFILES/mimeapps.list"
ln -nsf "mimeapps.list" "defaults.list"
cd "$HOME"

mkdir --parents "opt"

mkdir --parents ".bin"
ln -nsf "$VARIA/gitac" ".bin/gitac"
ln -nsf "$VARIA/gitacAll" ".bin/gitacAll"
ln -nsf "$VARIA/gitD" ".bin/gitD"

mkdir --parents Downloads/rtorrent
mkdir --parents .rtorrent.session

mkdir --parents ".config/newsbeuter"
cd ".config/newsbeuter"
ln -nsf "$DOTFILES/.newsbeuter/config"
ln -nsf "$VARIA/news.txt" urls
cd ../..

mkdir --parents ".cmus"
cd ".cmus"
ln -nsf "$DOTFILES/.cmus/rc"
cd ..

mkdir --parents ".elinks"
cd ".elinks"
ln -nsf "$DOTFILES/.elinks/elinks.conf"
cd ..

ln -nsf "$VARIA/.scanner.pixma" ".scanner"

touch .xbindkeys.noauto
for RC in bin .gitconfig .bashrc .profile .bash_aliases .jshintrc .hgrc .Xresources .Xmodmap .dircolors .inputrc .mailcap .muttrc .xbindkeysrc .vimrc .rtorrent.rc .fonts.conf.d .tmux.conf .chktexrc .ctags .nodepackages .screenrc .xinitrc .asoundrc
do
    ln -nsf "$DOTFILES/$RC"
done
ln -nsf "$DOTFILES/.xinitrc" ".xsession"
if [ "$(hostname)" = "server" ]
then
    ln -nsf "$DOTFILES/.xinitrc.server" ".xinitrc"
fi

mkdir --parents .mc
mkdir --parents .irssi
mkdir --parents .VirtualBox
mkdir --parents .vimbackup
mkdir --parents .vimtmp
mkdir --parents .vimsession

if [ "$(hostname)" = "desktop" ]
then
    mkdir --parents .recoll
    cd .recoll
    ln -nsf "$VARIA/desktop/recoll.conf"
    cd ..
fi

if [ "$(hostname)" = "laptop" ]
then
    mkdir --parents .config
    cd .config
    ln -nsf "$DOTFILES/.config/awesome"
    cd ..
fi

if ! [ -e ".varia/desktop" ]
then
    cd .varia
    ln -nsf "$VARIA/desktop"
    cd ..
fi

if [ "$ENABLE_GIT" = "yes" -a ! -e "opt/git-$GITV" ]
then
    cd "repos/git/git" && git co "v$GITV" || exit 1
    make configure && ./configure --prefix="$HOME/opt/git-$GITV" && make prefix="$HOME/opt/git-$GITV" PROFILE=BUILD all doc info && make prefix="$HOME/opt/git-$GITV" PROFILE=BUILD install install-doc install-html install-info || exit 1
    cd "../../.."
    cd opt && ln -nsf "git-$GITV" "git" && cd .. || exit 1
    cd .bin && (for BIN in $(ls "../opt/git/bin/"*); do ln -nsf "$BIN"; done) && cd .. || exit 1
fi

if ! [ -e "opt/autoconf-${AUTOCONFV}" ]
then
    curl -L "http://ftp.gnu.org/gnu/autoconf/autoconf-${AUTOCONFV}.tar.xz" | tar Jxf - || exit 1
    cd "autoconf-${AUTOCONFV}" && ./configure --prefix="$HOME/opt/autoconf-${AUTOCONFV}" && make && make install && cd .. && rm -rf "autoconf-${AUTOCONFV}" || exit 1
    cd opt && ln -nsf "autoconf-${AUTOCONFV}" "autoconf" && cd .. || exit 1
    cd .bin && (for BIN in $(ls ../opt/autoconf/bin/*); do ln -nsf "$BIN"; done) && cd .. || exit 1
fi


if ! [ -e "opt/automake-${AUTOMAKEV}" ]
then
    (cd "repos/git/automake" && git archive --format=tar --prefix=automake-build/ "v$AUTOMAKEV") | tar xf - || exit 1
    cd "automake-build" && ./bootstrap.sh && ./configure --prefix="$HOME/opt/automake-${AUTOMAKEV}" && make && make install && cd .. && rm -rf "automake-build" || exit 1
    cd opt && ln -nsf "automake-${AUTOMAKEV}" "automake" && cd .. || exit 1
    cd .bin && (for BIN in $(ls ../opt/automake/bin/*); do ln -nsf "$BIN"; done) && cd .. || exit 1
fi

if ! [ -e "opt/llvm-${LLVMV}" ]
then
    curl -L "http://llvm.org/releases/${LLVMV}/llvm-${LLVMV}.src.tar.gz" | tar zxf - || exit 1
    curl -L "http://llvm.org/releases/${LLVMV}/clang-${LLVMV}.src.tar.gz" | tar zxf - || exit 1
    mv "clang-${LLVMV}" "llvm-${LLVMV}/tools/clang"
    cd "llvm-${LLVMV}"
    CC="$(which gcc)" CXX="$(which g++)" ./configure --enable-optimized --enable-shared --prefix="$HOME/opt/llvm-${LLVMV}" && make && make install || exit 1
    cd ..
    rm -rf "llvm-${LLVMV}"
    cd opt
    ln -nsf "llvm-${LLVMV}" "llvm"
    cd ..
fi

if ! [ -e "opt/glibc-$GLIBCV" ]
then
    curl -L "http://ftp.gnu.org/gnu/glibc/glibc-${GLIBCV}.tar.xz" | tar Jxf - || exit 1
    mkdir "glibc-build"
    cd "glibc-build"
    "../glibc-${GLIBCV}/configure" --prefix="$HOME/opt/glibc-${GLIBCV}" && make && make install || exit 1
    cd ..
    rm -rf "glibc-build" "glibc-${GLIBCV}"
    cd opt
    ln -nsf "glibc-${GLIBCV}" "glibc"
    cd ..
fi

curl -L https://raw.github.com/spawngrid/kerl/master/kerl > .bin/kerl && chmod +x .bin/kerl && kerl update releases || exit 1

if ! [ -e "opt/erlang-$ERLANGV" ]
then
    kerl build git https://github.com/erlang/otp.git OTP-$ERLANGV $ERLANGV && kerl install "$ERLANGV" "$HOME/opt/erlang-$ERLANGV" || exit 1
    cd opt && ln -nsf "erlang-$ERLANGV" "erlang" && cd .. || exit 1
fi

if ! [ -e ".nvm" ]
then
    git clone https://github.com/creationix/nvm .nvm && source .nvm/nvm.sh || exit 1
else
    cd .nvm && git pull --rebase && cd .. || exit 1
fi

if ! [ -e ".nvm/v$NODEV" ]
then
    "$DOTFILES/bin/nodeup" "$NODEV"
fi

if ! [ -e "opt/imagemagick-${IMAGEMAGICKV}" ]
then
    curl -L "http://mirror.checkdomain.de/imagemagick/ImageMagick-${IMAGEMAGICKV}.tar.xz" | tar Jxf - || exit 1
    cd "ImageMagick-${IMAGEMAGICKV}" && ./configure --prefix=${HOME}/opt/imagemagick-${IMAGEMAGICKV} --with-quantum-depth=8 --with-modules --without-perl --with-bzlib --with-x --with-zlib --with-autotrace --without-dps --with-djvu --with-fftw --without-fpx --with-fontconfig --with-freetype --with-gslib --with-gvc --with-jbig --with-jpeg --with-lcms --with-lcms2 --without-openjp2 --with-lqr --with-lzma --with-mupdf --with-openexr --with-pango --with-png --with-rsvg --with-tiff --without-webp --with-wmf --with-xml --disable-hdri --enable-deprecated --enable-opencl --enable-openmp && make && make install || exit 1
    cd ..
    rm -rf "ImageMagick-${IMAGEMAGICKV}"
    cd opt
    ln -nsf "imagemagick-${IMAGEMAGICKV}" "imagemagick"
    cd ../.bin
    for BIN in $(ls "../opt/imagemagick/bin")
    do
        ln -nsf "../opt/imagemagick/bin/${BIN}"
    done
    cd ..
fi

if ! [ -e "opt/graphicsmagick-${GRAPHICSMAGICKV}" ]
then
    pushd .
    cd "$HOME/repos/hg/graphicsmagick" || exit 1
    hg checkout "$GRAPHICSMAGICKTAG" || exit 1
    make distclean
    ./configure --with-png --with-x --with-zlib --with-xml --with-wmf --with-ttf --with-trio --with-tiff --with-lzma --with-lcms2 --without-lcms --with-jp2 --with-jpeg --without-webp --with-jbig --with-gslib --without-fpx --without-dps --with-bzlib --with-quantum-depth=8 --with-modules --with-threads --enable-magick-compat --enable-openmp --prefix="$HOME/opt/graphicsmagick-$GRAPHICSMAGICKV" && make && make install || exit 1
    popd
fi

if ! [ -e ".rvm" ]
then
    curl -L https://get.rvm.io | rvm_path="$HOME/.rvm" bash -s stable --ruby="$RUBYV" --autolibs=read-fail || exit 1
else
    rvm get head || exit 1
fi
source .rvm/scripts/rvm

if ! [ -e ".rvm/rubies/ruby-$RUBYV" ]
then
    rvm install "$RUBYV" && rvm --default use "$RUBYV" && rvm default || exit 1
    LDFLAGS="-Wl,--rpath=$HOME/opt/graphicsmagick-$GRAPHICSMAGICKV/lib,--enable-new-dtags" CFLAGS="-I$HOME/opt/graphicsmagick-$GRAPHICSMAGICKV/include" CXXFLAGS="-I$HOME/opt/graphicsmagick-$GRAPHICSMAGICKV/include" PKG_CONFIG_PATH="$HOME/opt/graphicsmagick-$GRAPHICSMAGICKV/lib/pkgconfig" gem install jekyll kramdown pdfbeads rmagick iconv hpricot compass travis-lint metaclass || exit 1
    rvm docs generate-ri
fi
GEM_DIR=$(rvm gemdir 2>/dev/null)

if ! [ -e "$GVM_ROOT" ]
then
    git clone https://github.com/moovweb/gvm "$GVM_ROOT" && mkdir "$GVM_ROOT/logs" && source "$GVM_ROOT/scripts/gvm-default" || exit 1
else
    pushd .
    cd "$GVM_ROOT"
    if ! [ -e ".git" ]
    then
        mv git.bak .git
    fi
    git pull --rebase || exit 1
    popd
    source "$GVM_ROOT/scripts/gvm-default" || exit 1
fi

if ! [ -e "$GVM_ROOT/gos/go${GOV}" ]
then
    gvm alias delete default
    gvm install "go${GOV}" && gvm alias create default "go${GOV}" && gvm use default || exit 1
fi

if ! [ -e "opt/r-$RV" ]
then
    curl -L "http://stat.ethz.ch/CRAN/src/base/R-$RMV/R-${RV}.tar.gz" | tar zxf - || exit 1
    cd "R-${RV}"
    ./configure --enable-R-shlib --prefix="$HOME/opt/r-$RV" && make && make install || exit 1
    cd ../opt
    ln -s "r-$RV" "r"
    cd ../.bin
    ln -nsf "../opt/r-$RV/bin/R"
    cd ..
    rm -rf "R-${RV}"
    echo 'install.packages(c("outliers", "ggthemes", "Rserve", "gdata", "knitr", "vimcom", "setwidth", "animation", "rgl", "ggplot2", "memisc"), repos=c("http://cran.us.r-project.org", dependencies=TRUE))' | R --no-save || exit 1
    wget "http://www.lepem.ufc.br/jaa/colorout_${COLOROUTV}.tar.gz" || exit 1
    echo "install.packages(c(\"colorout_${COLOROUTV}.tar.gz\"), type=\"source\", repos=NULL)" | R --no-save || exit 1
    rm colorout_${COLOROUTV}.tar.gz
fi

if ! [ -e "opt/js-1.8.5" ]
then
    curl -L "http://ftp.mozilla.org/pub/mozilla.org/js/js185-1.0.0.tar.gz" | tar zx || exit 1
    cd js-1.8.5/js/src && ./configure --prefix="$HOME/opt/js-1.8.5" && make && make install || exit 1
    cd ../../.. && rm -rf js-1.8.5 || exit 1
fi

if ! [ -e "opt/apache-ant-$ANTV" ]
then
    curl -L http://apache.mirror.vu.lt/apache/ant/binaries/apache-ant-$ANTV-bin.tar.bz2 | tar jxf - || exit 1
    mv "apache-ant-$ANTV" opt && cd opt && ln -nsf "apache-ant-$ANTV" "apache-ant" || exit 1
    cd ../.bin && ln -nsf "../opt/apache-ant/bin/ant" || exit 1
    cd ..
fi

if ! [ -e "opt/mp4v2-$MP4V2V" ]
then
    cd "$HOME/repos/svn/mp4v2$MP4V2PATH" || exit 1
    autoreconf -fiv || exit 1
    ./configure --prefix="$HOME/opt/mp4v2-$MP4V2V" && make && make install || exit 1
    cd "$HOME"
fi

if ! [ -e "opt/faac-$FAACV" ]
then
    curl -L "http://optimate.dl.sourceforge.net/project/faac/faac-src/faac-1.28/faac-1.28.tar.gz" | tar zxf - || exit 1
    cd "faac-$FAACV"
    curl -L "https://projects.archlinux.org/svntogit/packages.git/plain/trunk/mp4v2-1.9.patch?h=packages/faac" | patch -p1 || exit 1
    curl -L "https://projects.archlinux.org/svntogit/packages.git/plain/trunk/mp4v2-2.0.0.patch?h=packages/faac" | patch -p0 || exit 1
    curl -L "https://projects.archlinux.org/svntogit/packages.git/plain/trunk/altivec.patch?h=packages/faac" | patch -p0 || exit 1
    ./bootstrap && CFLAGS="-I$HOME/opt/mp4v2-$MP4V2V/include" LDFLAGS="-lmp4v2 -Wl,--rpath=$HOME/opt/mp4v2-$MP4V2V/lib,--enable-new-dtags -L$HOME/opt/mp4v2-$MP4V2V/lib" ./configure --prefix="$HOME/opt/faac-$FAACV" --with-mp4v2 && make && make install || exit 1
    cd ..
    rm -rf "faac-$FAACV"
    cd .bin
    ln -nsf "../opt/faac-$FAACV/bin/faac"
    cd ..
fi

if [ "$ENABLE_LIBVPX" = "yes" -a ! -e "opt/libvpx-$LIBVPXV" ]
then
    cd "repos/git/libvpx" && git co "v$LIBVPXV" || exit 1
    ./configure --enable-shared --enable-static --disable-runtime-cpu-detect --enable-multithread --enable-vp9-postproc --enable-postproc --enable-vp9 --enable-vp8 --disable-internal-stats --disable-mem-tracker --disable-fast-unaligned --disable-unit-tests --disable-docs --disable-examples --enable-libs --disable-install-docs --enable-install-bins --enable-install-libs --enable-install-srcs --cpu=native --enable-optimizations --enable-pic --disable-ccache --disable-debug --disable-gprof --disable-gcov --prefix="$HOME/opt/libvpx-$LIBVPXV" && make && make install || exit 1
    cd ../../..
    cd opt && ln -nsf "libvpx-$LIBVPXV" "libvpx" && cd .. || exit 1
fi

if [ "$ENABLE_FFMPEG" = "yes" -a ! -e "opt/ffmpeg-$FFMPEGV" ]
then
    (cd "repos/git/ffmpeg" && git archive --format=tar --prefix=ffmpeg-build/ "n$FFMPEGV") | tar xf - || exit 1
    cd ffmpeg-build && ./configure --extra-ldflags="-Wl,--rpath=$HOME/opt/ffmpeg-$FFMPEGV/lib,--enable-new-dtags -lvpx -Wl,--rpath=$HOME/opt/libvpx-$LIBVPXV/lib,--enable-new-dtags -L$HOME/opt/libvpx-$LIBVPXV/lib" --cpu=host --enable-openssl --disable-runtime-cpudetect --prefix="$HOME/opt/ffmpeg-$FFMPEGV" --enable-shared --enable-nonfree --enable-gpl --enable-static --enable-pic --enable-vaapi --extra-cflags="-fPIC -DPIC -I$HOME/opt/libvpx-$LIBVPXV/include" --enable-version3 --extra-cxxflags="-fPIC -DPIC -I$HOME/opt/libvpx-$LIBVPXV/include" --enable-libvpx --enable-libvorbis && make && make install && cd .. || exit 1
    rm -rf ffmpeg-build
    cd opt && ln -nsf "ffmpeg-$FFMPEGV" "ffmpeg" && cd .. || exit 1
    cd .bin && (for BIN in $(ls ../opt/ffmpeg/bin/*); do ln -nsf "$BIN"; done) && cd .. || exit 1
fi

if ! [ -e "opt/cmus-$CMUSV" ]
then
    (cd "repos/git/cmus" && git archive --format=tar --prefix=cmus-build/ "$CMUSCOMMIT") | tar xf - || exit 1
    cd cmus-build && CFLAGS="-I$HOME/opt/mp4v2-$MP4V2V/include" LDFLAGS="-Wl,--rpath=$HOME/opt/ffmpeg-$FFMPEGV/lib,--enable-new-dtags -lmp4v2 -Wl,--rpath=$HOME/opt/mp4v2-$MP4V2V/lib,--enable-new-dtags -L$HOME/opt/mp4v2-$MP4V2V/lib" PKG_CONFIG_PATH="$HOME/opt/ffmpeg-$FFMPEGV/lib/pkgconfig" ./configure CONFIG_CDDB=n CONFIG_CDIO=n CONFIG_DISCID=n CONFIG_FLAC=y CONFIG_MAD=y CONFIG_MODPLUG=n CONFIG_MIKMOD=n CONFIG_MPC=n CONFIG_VORBIS=y CONFIG_TREMOR=n CONFIG_WAV=y CONFIG_WAVPACK=y CONFIG_MP4=y CONFIG_AAC=y CONFIG_FFMPEG=y CONFIG_CUE=y CONFIG_ROAR=n CONFIG_PULSE=y CONFIG_ALSA=y CONFIG_AO=n CONFIG_ARTS=n CONFIG_OSS=n CONFIG_SUN=n CONFIG_WAVEOUT=n USE_FALLBACK_IP=y CONFIG_AO=n prefix="$HOME/opt/cmus-$CMUSV" && make && make install && cd .. && rm -rf cmus-build || exit 1
    cd opt && ln -nsf "cmus-$CMUSV" "cmus" && cd .. || exit 1
    cd .bin && ln -nsf "../opt/cmus/bin/cmus" && cd .. || exit 1
fi

if ! [ -e "opt/elinks-$ELINKSV" ]
then
    cd "repos/git/elinks" && git co "$ELINKSV" || exit 1
    ./autogen.sh && LDFLAGS="-Wl,--rpath=$HOME/opt/js-1.8.5/lib,--enable-new-dtags" PKG_CONFIG_PATH="$HOME/opt/js-1.8.5/lib/pkgconfig" ./configure --prefix="$HOME/opt/elinks-$ELINKSV" --enable-sm-scripting --without-lua --without-ruby --without-perl --without-python && make && make install || exit 1
    cd ../../.. || exit 1
    cd opt && ln -nsf "elinks-$ELINKSV" elinks && cd .. || exit 1
    cd .bin && ln -nsf "../opt/elinks/bin/elinks" && cd .. || exit 1
fi

if ! [ -e "opt/youtube-dl-$YOUTUBEDLV" ]
then
    curl -L "http://youtube-dl.org/downloads/$YOUTUBEDLV/youtube-dl" > "opt/youtube-dl-$YOUTUBEDLV"
    chmod +x "opt/youtube-dl-$YOUTUBEDLV"
    cd opt
    ln -nsf "youtube-dl-$YOUTUBEDLV" "youtube-dl"
    cd ../.bin
    ln -nsf "../opt/youtube-dl"
    cd ..
fi

if ! [ -e "opt/libevent-$LIBEVENTV" ]
then
    curl -L "https://github.com/downloads/libevent/libevent/libevent-$LIBEVENTV-stable.tar.gz" | tar zxf -
    cd "libevent-$LIBEVENTV-stable"
    ./configure --prefix="$HOME/opt/libevent-$LIBEVENTV" && make && make install || exit 1
    cd ..
    rm -rf "libevent-$LIBEVENTV-stable"
fi

if ! [ -e "opt/tmux-$TMUXV" ]
then
    curl -L "http://downloads.sourceforge.net/tmux/tmux-${TMUXV}.tar.gz" | tar zxf -
    cd "tmux-$TMUXV"
    LDFLAGS="-Wl,-rpath,$HOME/opt/libevent-$LIBEVENTV/lib" PKG_CONFIG_PATH="$HOME/opt/libevent-$LIBEVENTV/lib/pkgconfig" ./configure --prefix="$HOME/opt/tmux-$TMUXV" && make && make install || exit 1
    cd ..
    rm -rf "tmux-$TMUXV"
    cd opt
    ln -nsf "tmux-$TMUXV" "tmux"
    cd ../.bin
    ln -nsf "../opt/tmux/bin/tmux"
    cd ..
fi

if ! [ -e "opt/nzbget-$NZBGETV" ]
then
    curl -L "http://sourceforge.net/projects/nzbget/files/nzbget-${NZBGETV}.tar.gz" | tar zxf -
    cd "nzbget-${NZBGETV}"
    ./configure --disable-libpar2-bugfixes-check --prefix="$HOME/opt/nzbget-${NZBGETV}" && make && make install || exit 1
    cd ..
    rm -rf "nzbget-${NZBGETV}"
    cd opt
    ln -nsf "nzbget-${NZBGETV}" "nzbget"
    cd ../.bin
    ln -nsf "../opt/nzbget/bin/nzbget"
    cd ..
fi

if ! [ -e "opt/xwinlogger" ]
then
    curl -L "https://github.com/emilis/xwinlogger/archive/master.tar.gz" | tar zxf -
    mkdir --parents "opt/xwinlogger/lib" "opt/xwinlogger/bin"
    cd "xwinlogger-master"
    INSTALL_DIR="$HOME/opt/xwinlogger/lib" BIN_DIR="$HOME/opt/xwinlogger/bin" ./install.sh || exit 1
    cd ..
    rm -rf "xwinlogger-master"
    cd .bin
    ln -nsf "../opt/xwinlogger/bin/xwinlogger"
    cd ..
fi

if ! [ -e "opt/podcatcher-$PODCATCHERV" ]
then
    curl -L "$PODCATCHERURL" | tar zxf -
    mv podcatcher opt/podcatcher-$PODCATCHERV
    cd opt
    ln -nsf podcatcher-$PODCATCHERV podcatcher
    cd ../.bin
    ln -nsf ../opt/podcatcher/bin/podcatcher
    cd ..
fi

if ! [ -e "opt/libxslt-$XSLTV" ]
then
    curl -L ftp://xmlsoft.org/libxslt/libxslt-${XSLTV}.tar.gz | tar zxf - || exit 1
    cd "libxslt-$XSLTV"
    ./configure --prefix="$HOME/opt/libxslt-${XSLTV}" && make && make install || exit 1
    cd ../opt
    ln -nsf "libxslt-${XSLTV}" "libxslt"
    cd ../.bin
    ln -nsf "../opt/libxslt/bin/xslt-config"
    ln -nsf "../opt/libxslt/bin/xsltproc"
    cd ..
    rm -rf "libxslt-$XSLTV"
fi

if ! [ -e "opt/fuse-$FUSEV" ]
then
    cd "repos/git/fuse" || exit 1
    git co "$FUSETAG" || exit 1
    ./makeconf.sh && ./configure --prefix="$HOME/opt/fuse-$FUSEV" --enable-lib --disable-util --enable-rpath && make && make install || exit 1
    cd "../../.."
    cd "opt" && ln -nsf "fuse-$FUSEV" "fuse" && cd ".."
fi

if ! [ -e "$PERLBREW_ROOT" ]
then
    ./repos/git/App-perlbrew/perlbrew-install && source "$PERLBREW_ROOT/etc/bashrc" || exit 1
else
    TWGET="$(mktemp --directory)"
    tee "$TWGET/wget" <<EOT
#!/usr/bin/env bash

if [ "\$1" = "--quiet" ]
then
    curl -L "\$4"
fi
EOT
    chmod +x "$TWGET/wget" && PATH="$TWGET:$PATH" perlbrew self-upgrade && rm -rf "$TWGET" || exit 1
fi

if ! [ -e "$PERLBREW_ROOT/perls/perl-$PERLV" ]
then
    perlbrew install "perl-$PERLV" || exit 1
    perlbrew switch "perl-$PERLV" || exit 1
    perlbrew alias delete default
    perlbrew alias create "perl-$PERLV" default || exit 1

    for PACKAGE in File::Which Readonly::XS
    do
        cpan "$PACKAGE" || exit 1
    done

    curl -L https://github.com/plk/biber/archive/v${BIBERV}.tar.gz|tar zxf - || exit 1
    cd "biber-$BIBERV"
    cpan -f . || exit 1
    cd ..
    rm -rf "biber-$BIBERV"
fi

if ! [ -e "$PYENV_ROOT" ]
then
    git clone https://github.com/yyuu/pyenv "$PYENV_ROOT" || exit 1
    CONFIGURE_OPTS="--enable-shared" pyenv install "$PYTHONMAINV" || exit 1
    eval "$(pyenv init -)" || exit 1
    pyenv shell "$PYTHONMAINV" || exit 1
    pyenv global "$PYTHONMAINV" || exit 1
    for PACKAGE in cython lxml six jsbeautifier pygments ocrodjvu python-djvulibre fuse-python fusepy reportlab term2048
    do
        PKG_CONFIG_PATH="$HOME/opt/fuse/lib/pkgconfig" pip install "$PACKAGE" && pyenv rehash || exit 1
    done

    # required for https://github.com/dmedvinsky/mutt-ics
    pip install brownie
    pip install icalendar

    git clone https://github.com/wetneb/pygments_maple && cd pygments_maple && python setup.py install && cd .. && rm -rf pygments_maple || exit 1
else
    cd "$PYENV_ROOT" && git pull --rebase && cd "$HOME" || exit 1
fi

if ! [ -e "$PYENV_ROOT/versions/$PYTHONV" ]
then
    pyenv install "$PYTHONV" || exit 1
    echo "$PYTHONV" > "$PYENV_ROOT/version$PYTHONVERSIONFILE"
fi

if ! [ -e "opt/ghc-$GHCV" ]
then
    pyenv shell system

    GHCSYSTEMV="$(ghc --numeric-version)"
    if [ "$(echo -e "$GHCSYSTEMV\n7.6.3"|sort --version-sort|head -n 1)" = "$GHCSYSTEMV" ]
    then
        curl -L "https://www.haskell.org/ghc/dist/7.6.3/ghc-7.6.3-$(uname -m)-unknown-linux.tar.bz2" | tar jxf - && cd ghc-7.6.3 && ./configure --prefix="$(pwd)/ghc-7.6.3-temp" && make install && cd .. || exit 1
        export PATH="$(pwd)/ghc-7.6.3/ghc-7.6.3-temp/bin:$PATH"
        echo "Installed temporary ghc-7.6.3"
    fi

    (cd "repos/git/cabal" && git archive --format=tar --prefix=cabal-build/ "cabal-install-v$CABALINSTALLV") | tar xf - || exit 1
    rm -rf .cabal .ghc && cd cabal-build/cabal-install && sh bootstrap.sh && "$HOME/.cabal/bin/cabal" update && cd ../.. && rm -rf cabal-build || exit 1
    echo "Installed temporary cabal-install"

    "$HOME/.cabal/bin/cabal" install happy && "$HOME/.cabal/bin/cabal" install alex || exit 1
    echo "Installed temporary happy and alex"

    GHCREMOTE="$(cd repos/git/ghc && git config --get remote.origin.url)"
    git clone repos/git/ghc ghc-build && cd ghc-build && git remote rm origin && git remote add origin "$GHCREMOTE" && git co "ghc-$GHCV-release" && ./sync-all --no-dph get && ./sync-all checkout -b ghc-$GHCV ghc-$GHCV-release && perl boot && ./configure --prefix="$HOME/opt/ghc-$GHCV" && make -j3 && make install && cd .. && rm -rf ghc-build .cabal .ghc ghc-7.6.3 && cd opt && ln -nsf "ghc-$GHCV" ghc && cd .. || exit 1

    pyenv shell "$PYTHONMAINV"
fi

if ! [ -e "opt/cabal-install-$CABALINSTALLV" ]
then
    (cd "repos/git/cabal" && git archive --format=tar --prefix=cabal-build/ "cabal-install-v$CABALINSTALLV") | tar xf - || exit 1
    cd cabal-build/cabal-install && sh bootstrap.sh && "$HOME/.cabal/bin/cabal" update && cd ../.. && rm -rf cabal-build || exit 1
    mkdir "opt/cabal-install-$CABALINSTALLV" && cd "opt/cabal-install-$CABALINSTALLV" && "$HOME/.cabal/bin/cabal" sandbox init --sandbox . && "$HOME/.cabal/bin/cabal" install "cabal-install==$CABALINSTALLV" && cd ../.. && rm -rf .cabal .ghc || exit 1
    cd .bin && ln -nsf "../opt/cabal-install-$CABALINSTALLV/bin/cabal" && cd .. || exit 1
fi

cabal update || exit 1

if ! [ -e "opt/vim-$VIMV" ]
then
    cd "$HOME/repos/hg/vim" || exit 1
    hg checkout "$VIMV" || exit 1
    make distclean
    ./configure --enable-pythoninterp=yes --with-features=huge --enable-cscope --prefix="$HOME/opt/vim-$VIMV" && make && make install || exit 1
    cd "$HOME/opt"
    ln -nsf "vim-$VIMV" "vim"
    cd ../.bin
    ln -nsf "../opt/vim/bin/vim"
    ln -nsf "../opt/vim/bin/vimdiff"
    cd ..
    rm -rf vim
fi

mkdir --parents .vimtmp .vimbackup .vimsession
if ! [ -e ".vim" ]
then
    git clone https://github.com/gmarik/vundle.git .vim/bundle/vundle
    vim +BundleInstall +qall
    cd .vim/bundle/YouCompleteMe/cpp
    cmake -g "Unix Makefiles"
    make
    cd ../../../..
fi

if ! [ -e "opt/git-annex-$GITANNEXV" ]
then
    (cd "$HOME/repos/git/bloomfilter" && git archive --format=tar --prefix=bloomfilter-build/ "1.2.6.10") | tar xf - || exit 1
    cd bloomfilter-build && echo "
ZGlmZiAtLWdpdCBhL0RhdGEvQmxvb21GaWx0ZXIuaHMgYi9EYXRhL0Jsb29tRmlsdGVyLmhzCmlu
ZGV4IDY5NzExZWYuLmI5NTY2ZWEgMTAwNjQ0Ci0tLSBhL0RhdGEvQmxvb21GaWx0ZXIuaHMKKysr
IGIvRGF0YS9CbG9vbUZpbHRlci5ocwpAQCAtOTMsNyArOTMsNyBAQCBpbXBvcnQgQ29udHJvbC5N
b25hZCAobGlmdE0sIGZvck1fKQogaW1wb3J0IENvbnRyb2wuTW9uYWQuU1QgKFNULCBydW5TVCkK
IGltcG9ydCBDb250cm9sLkRlZXBTZXEgKE5GRGF0YSguLikpCiBpbXBvcnQgRGF0YS5BcnJheS5C
YXNlICh1bnNhZmVBdCwgdW5zYWZlUmVhZCwgdW5zYWZlV3JpdGUpCi1pbXBvcnQgRGF0YS5BcnJh
eS5TVCAoU1RVQXJyYXksIHRoYXcsIHVuc2FmZUZyZWV6ZSkKK2ltcG9ydCBEYXRhLkFycmF5LkJh
c2UgKFNUVUFycmF5LCB0aGF3LCB1bnNhZmVGcmVlemUpCiBpbXBvcnQgRGF0YS5BcnJheS5VbmJv
eGVkIChVQXJyYXkpCiBpbXBvcnQgRGF0YS5CaXRzICgoLiYuKSwgKC58LikpCiBpbXBvcnQgRGF0
YS5CbG9vbUZpbHRlci5BcnJheSAobmV3QXJyYXkpCkBAIC0yNjYsNyArMjY2LDcgQEAgZWxlbU1C
IGVsdCBtYiA9IGxvb3AgKGhhc2hlc00gbWIgZWx0KQogZWxlbUIgOjogYSAtPiBCbG9vbSBhIC0+
IEJvb2wKIGVsZW1CIGVsdCB1YiA9IGFsbCB0ZXN0IChoYXNoZXNVIHViIGVsdCkKICAgd2hlcmUg
dGVzdCAob2ZmIDoqIGJpdCkgPSAoYml0QXJyYXlCIHViIGB1bnNhZmVBdGAgb2ZmKSAuJi4gKDEg
YHNoaWZ0TGAgYml0KSAvPSAwCi0gICAgICAgICAgCisKIG1vZGlmeUIgOjogKGZvcmFsbCBzLiAo
TUJsb29tIHMgYSAtPiBTVCBzIHopKSAgLS0gXiBtdXRhdGlvbiBmdW5jdGlvbiAocmVzdWx0IGlz
IGRpc2NhcmRlZCkKICAgICAgICAgLT4gQmxvb20gYQogICAgICAgICAtPiBCbG9vbSBhCmRpZmYg
LS1naXQgYS9EYXRhL0Jsb29tRmlsdGVyL0FycmF5LmhzIGIvRGF0YS9CbG9vbUZpbHRlci9BcnJh
eS5ocwppbmRleCBlMDg1YmJlLi5kOTQ3NTdhIDEwMDY0NAotLS0gYS9EYXRhL0Jsb29tRmlsdGVy
L0FycmF5LmhzCisrKyBiL0RhdGEvQmxvb21GaWx0ZXIvQXJyYXkuaHMKQEAgLTMsNyArMyw4IEBA
CiAKIG1vZHVsZSBEYXRhLkJsb29tRmlsdGVyLkFycmF5IChuZXdBcnJheSkgd2hlcmUKIAotaW1w
b3J0IENvbnRyb2wuTW9uYWQuU1QgKFNULCB1bnNhZmVJT1RvU1QpCitpbXBvcnQgQ29udHJvbC5N
b25hZC5TVCAoU1QpCitpbXBvcnQgQ29udHJvbC5Nb25hZC5TVC5VbnNhZmUgKHVuc2FmZUlPVG9T
VCkKIGltcG9ydCBEYXRhLkFycmF5LkJhc2UgKE1BcnJheSwgU1RVQXJyYXkoLi4pLCB1bnNhZmVO
ZXdBcnJheV8pCiAjaWYgX19HTEFTR09XX0hBU0tFTExfXyA+PSA3MDQKIGltcG9ydCBGb3JlaWdu
LkMuVHlwZXMgKENJbnQoLi4pLCBDU2l6ZSguLikpCg==
" | base64 -d | patch -p1 && cd .. || exit 1
    mkdir -p "opt/git-annex-$GITANNEXV" && cd "opt/git-annex-$GITANNEXV" && cabal sandbox init --sandbox . && cabal sandbox add-source "$HOME/bloomfilter-build" && cabal install "git-annex==$GITANNEXV" --flags="-s3 -webdav -inotify -dbus -assistant -webapp -webapp-secure -pairing -xmpp dns production -android -androidsplice -testsuite -feed -quvi -tahoe cryptohash -desktopnotify -ekg" && cd ../.. && rm -rf "bloomfilter-build" || exit 1
    cd .bin && ln -nsf "../opt/git-annex-$GITANNEXV/bin/git-annex" && cd .. || exit 1
    cd .bin && ln -nsf "../opt/git-annex-$GITANNEXV/bin/git-annex" git-annex-shell && cd .. || exit 1
fi

if [ "$ENABLE_ALEX" = "yes" -a ! -e "opt/alex-$ALEXV" ]
then
    mkdir -p "opt/alex-$ALEXV" && cd "opt/alex-$ALEXV" && cabal sandbox init --sandbox . && cabal install "alex==$ALEXV" && cd ../.. || exit 1
    cd .bin && ln -nsf "../opt/alex-$ALEXV/bin/alex" && cd .. || exit 1
fi

if [ "$ENABLE_HAPPY" = "yes" -a ! -e "opt/happy-$HAPPYV" ]
then
    mkdir -p "opt/happy-$HAPPYV" && cd "opt/happy-$HAPPYV" && cabal sandbox init --sandbox . && cabal install "happy==$HAPPYV" && cd ../.. || exit 1
    cd .bin && ln -nsf "../opt/happy-$HAPPYV/bin/happy" && cd .. || exit 1
fi

if [ "$ENABLE_PANDOC" = "yes" -a ! -e "opt/pandoc-$PANDOCV" ]
then
    mkdir -p "opt/pandoc-$PANDOCV" && cd "opt/pandoc-$PANDOCV" && cabal sandbox init --sandbox . && cabal install "pandoc==$PANDOCV" && cd ../.. || exit 1
    cd .bin && ln -nsf "../opt/pandoc-$PANDOCV/bin/pandoc" && cd .. || exit 1
    cd .bin && ln -nsf "../opt/pandoc-$PANDOCV/bin/json2yaml" && cd .. || exit 1
    cd .bin && ln -nsf "../opt/pandoc-$PANDOCV/bin/yaml2json" && cd .. || exit 1
fi

if ! [ -e "opt/mosh-$MOSHV" ]
then
    wget "http://mosh.mit.edu/mosh-${MOSHV}.tar.gz"
    tar xf mosh-$MOSHV.tar.gz
    cd mosh-$MOSHV
    ./configure --prefix=$HOME/opt/mosh-$MOSHV && make && make install || exit 1
    cd ../opt
    ln -nsf mosh-$MOSHV mosh
    cd ..
    rm -rf mosh-$MOSHV mosh-$MOSHV.tar.gz
    cd .bin
    ln -nsf ../opt/mosh/bin/mosh
    ln -nsf ../opt/mosh/bin/mosh-client
    ln -nsf ../opt/mosh/bin/mosh-server
    cd ..
fi

if ! [ -e "opt/json-c-$JSONCV" ]
then
    (cd "repos/git/json-c" && git archive --format=tar --prefix=json-c-build/ "json-c-$JSONCV") | tar xf - || exit 1
    cd json-c-build && CFLAGS="-Wno-error=unused-but-set-variable" ./configure --prefix="$HOME/opt/json-c-$JSONCV" && make && make install && cd .. && rm -rf json-c-build || exit 1
fi

if ! [ -e "opt/jq-$JQV" ]
then
    cd "repos/git/jq" && git co "$JQCOMMIT" && autoreconf -i && ./configure --prefix="$HOME/opt/jq-$JQV" && make && make install && cd ../../..|| exit 1
    cd opt && ln -nsf "jq-$JQV" "jq" && cd .. || exit 1
    cd .bin && (for BIN in $(ls "../opt/jq/bin/"*); do ln -nsf "$BIN"; done) && cd .. || exit 1
fi

if ! [ -e "opt/libplist-$PLISTV" ]
then
    ((cd "repos/git/libplist" && git archive --format=tar --prefix=libplist-build/ "$PLISTCOMMIT") | tar xf -) && cd "libplist-build" && NOCONFIGURE="yes" ./autogen.sh && LDFLAGS="-L$(pyenv prefix)/lib" CC=clang CXX=clang++ ./configure --prefix="$HOME/opt/libplist-${PLISTV}" && make && make install && cd .. && rm -rf "libplist-build" || exit 1
fi

if ! [ -e "opt/libusbmuxd-$USBMUXDV" ]
then
    (curl -L "http://www.libimobiledevice.org/downloads/libusbmuxd-${USBMUXDV}.tar.bz2" | tar jxf -) && cd "libusbmuxd-${USBMUXDV}" && LDFLAGS="-Wl,--rpath=$HOME/opt/libplist-${PLISTV}/lib,--enable-new-dtags" PKG_CONFIG_PATH="$HOME/opt/libplist-${PLISTV}/lib/pkgconfig" CC=clang CXX=clang++ ./configure --prefix="$HOME/opt/libusbmuxd-${USBMUXDV}" && make && make install && cd .. && rm -rf "libusbmuxd-${USBMUXDV}" || exit 1
fi

if ! [ -e "opt/libimobiledevice-$IMOBILEDEVICEV" ]
then
    (curl -L "http://www.libimobiledevice.org/downloads/libimobiledevice-${IMOBILEDEVICEV}.tar.bz2" | tar jxf -) && cd "libimobiledevice-${IMOBILEDEVICEV}" && LDFLAGS="-L$(pyenv prefix)/lib -Wl,--rpath=$HOME/opt/libusbmuxd-${USBMUXDV}/lib,--enable-new-dtags -Wl,--rpath=$HOME/opt/libplistv-${PLISTV}/lib,--enable-new-dtags" PKG_CONFIG_PATH="$HOME/opt/libplist-${PLISTV}/lib/pkgconfig:$HOME/opt/libusbmuxd-${USBMUXDV}/lib/pkgconfig" CFLAGS="-I$HOME/opt/libusbmuxd-${USBMUXDV}/include" CC=clang CXX=clang++ ./configure --prefix="$HOME/opt/libimobiledevice-${IMOBILEDEVICEV}" && make && make install && cd .. && rm -rf "libimobiledevice-${IMOBILEDEVICEV}" || exit 1
fi

if ! [ -e "opt/ideviceinstaller-$IDEVICEINSTALLERV" ]
then
    ((cd "repos/git/ideviceinstaller" && git archive --format=tar --prefix=ideviceinstaller-build/ "$IDEVICEINSTALLERCOMMIT") | tar xf -) && cd "ideviceinstaller-build" && NOCONFIGURE="yes" ./autogen.sh && LDFLAGS="-Wl,--rpath=$HOME/opt/libimobiledevice-${IMOBILEDEVICEV}/lib,--enable-new-dtags -Wl,--rpath=$HOME/opt/libusbmuxd-${USBMUXDV}/lib,--enable-new-dtags -Wl,--rpath=$HOME/opt/libplist-${PLISTV}/lib,--enable-new-dtags" PKG_CONFIG_PATH="$HOME/opt/libimobiledevice-${IMOBILEDEVICEV}/lib/pkgconfig:$HOME/opt/libusbmuxd-${USBMUXDV}/lib/pkgconfig:$HOME/opt/libplist-${PLISTV}/lib/pkgconfig" CC=clang CXX=clang++ ./configure --prefix="$HOME/opt/ideviceinstaller-${IDEVICEINSTALLERV}" && make && make install && cd .. && rm -rf "ideviceinstaller-build" || exit 1
fi

if ! [ -e "opt/ifuse-$IFUSEV" ]
then
    (curl -L "http://www.libimobiledevice.org/downloads/ifuse-${IFUSEV}.tar.bz2" | tar jxf -) && cd "ifuse-${IFUSEV}" && LDFLAGS="-Wl,--rpath=$HOME/opt/libimobiledevice-${IMOBILEDEVICEV}/lib,--enable-new-dtags -Wl,--rpath=$HOME/opt/libusbmuxd-${USBMUXDV}/lib,--enable-new-dtags -Wl,--rpath=$HOME/opt/libplist-${PLISTV}/lib,--enable-new-dtags" PKG_CONFIG_PATH="$HOME/opt/libimobiledevice-${IMOBILEDEVICEV}/lib/pkgconfig:$HOME/opt/libusbmuxd-${USBMUXDV}/lib/pkgconfig:$HOME/opt/libplist-${PLISTV}/lib/pkgconfig" CC=clang CXX=clang++ ./configure --prefix="$HOME/opt/ifuse-${IFUSEV}" && make && make install && cd .. && rm -rf "ifuse-${IFUSEV}" && (cd .bin && ln -s ../opt/ifuse-$IFUSEV/bin/ifuse) || exit 1
fi

if ! [ -e "opt/libusb-$LIBUSBV" ]
then
    ((cd "repos/git/libusb" && git archive --format=tar --prefix=libusb-build/ "v$LIBUSBV") | tar xf -) && cd "libusb-build" && NOCONFIGURE="yes" ./autogen.sh && ./configure --prefix="$HOME/opt/libusb-$LIBUSBV" && make && make install && cd .. && rm -rf "libusb-build" || exit 1
fi

if ! [ -e "opt/usbmuxd-$USBMUXDV" ]
then
    ((cd "repos/git/usbmuxd" && git archive --format=tar --prefix=usbmuxd-build/ "$USBMUXDCOMMIT") | tar xf -) && cd "usbmuxd-build" && NOCONFIGURE="yes" ./autogen.sh && CFLAGS="-I$HOME/opt/libimobiledevice-${IMOBILEDEVICEV}/include" LDFLAGS="-Wl,--rpath=$HOME/opt/libimobiledevice-${IMOBILEDEVICEV}/lib,--enable-new-dtags -Wl,--rpath=$HOME/opt/libusb-${LIBUSBV}/lib,--enable-new-dtags -Wl,--rpath=$HOME/opt/libplist-${PLISTV}/lib,--enable-new-dtags -Wl,--rpath=$HOME/opt/libusbmuxd-${USBMUXDV}/lib,--enable-new-dtags" PKG_CONFIG_PATH="$HOME/opt/libusbmuxd-${USBMUXDV}/lib/pkgconfig:$HOME/opt/libimobiledevice-${IMOBILEDEVICEV}/lib/pkgconfig:$HOME/opt/libusb-${LIBUSBV}/lib/pkgconfig:$HOME/opt/libplist-${PLISTV}/lib/pkgconfig" CC=clang CXX=clang++ ./configure --prefix="$HOME/opt/usbmuxd-$USBMUXDV" && make && make install && cd .. && rm -rf "usbmuxd-build" || exit 1
fi

if ! [ -e "opt/newsbeuter-$NEWSBEUTERV" ]
then
    (cd "repos/git/newsbeuter" && git archive --format=tar --prefix=newsbeuter-build/ "$NEWSBEUTERCOMMIT") | tar xf - || exit 1
    cd newsbeuter-build && LDFLAGS="-Wl,--rpath=$HOME/opt/json-c-$JSONCV/lib,--enable-new-dtags" PKG_CONFIG_PATH="$HOME/opt/json-c-$JSONCV/lib/pkgconfig" ./config.sh && make "prefix=$HOME/opt/newsbeuter-$NEWSBEUTERV" && make "prefix=$HOME/opt/newsbeuter-$NEWSBEUTERV" install && cd .. && rm -rf newsbeuter-build || exit 1

    cd "opt"
    ln -nsf "newsbeuter-$NEWSBEUTERV" "newsbeuter"
    cd "../.bin"
    ln -nsf ../opt/newsbeuter/bin/newsbeuter
    cd ".."
fi

if ! [ -e "opt/qpdfview-$QPDFVIEWV" ]
then
    cd "$HOME/repos/bzr/qpdfview" || exit 1
    bzr revert -r "$QPDFVIEWR" && bzr clean-tree --force || exit 1
    sed --in-place "s/\/usr/$(echo "$HOME/opt/qpdfview-$QPDFVIEWV/usr"|sed -e 's/[]\/()$*.^|[]/\\&/g')/" qpdfview.pri
    qmake && make && make install || exit 1
    cd "$HOME/opt"
    ln -nsf qpdfview-$QPDFVIEWV qpdfview
    cd ../.bin
    ln -nsf ../opt/qpdfview-$QPDFVIEWV/usr/bin/qpdfview
    cd ..
fi

if ! [ -e "opt/mcabber-$MCABBERV" ]
then
    curl -L "http://mcabber.com/files/mcabber-${MCABBERV}.tar.bz2" | tar jxf -
    cd mcabber-$MCABBERV
    ./configure --prefix=$HOME/opt/mcabber-$MCABBERV && make && make install || exit 1
    cd ../opt
    ln -nsf mcabber-$MCABBERV mcabber
    cd ../.bin
    ln -nsf ../opt/mcabber/bin/mcabber
    cd ..
    rm -rf mcabber-$MCABBERV
fi

if ! [ -e "opt/rtorrent-$RTORRENTV" ]
then
    wget "http://libtorrent.rakshasa.no/downloads/libtorrent-${LIBTORRENTV}.tar.gz" -O - | tar zxf -
    wget "http://libtorrent.rakshasa.no/downloads/rtorrent-${RTORRENTV}.tar.gz" -O - | tar zxf -
    cd libtorrent-${LIBTORRENTV}
    ./configure --prefix=$HOME/opt/rtorrent-$RTORRENTV && make && make install || exit 1
    cd ../rtorrent-${RTORRENTV}
    PKG_CONFIG_PATH=$HOME/opt/rtorrent-$RTORRENTV/lib/pkgconfig ./configure --prefix=$HOME/opt/rtorrent-$RTORRENTV && make && make install
    cd ../opt
    ln -nsf rtorrent-$RTORRENTV rtorrent
    cd ..
    rm -rf rtorrent-${RTORRENTV} libtorrent-${LIBTORRENTV}
    cd .bin
    ln -nsf ../opt/rtorrent/bin/rtorrent
    cd ..
fi

if ! [ -e "opt/mac-$MACV" ]
then
    curl -L "http://www.etree.org/shnutils/shntool/support/formats/ape/unix/$MACV/mac-$MACV.tar.gz" | tar zxf - || exit 1
    cd "mac-$MACV"
    ./configure --prefix="$HOME/opt/mac-$MACV" && make && make install || exit 1
    cd ..
    rm -rf "mac-$MACV"
    cd .bin
    ln -nsf "../opt/mac-$MACV/bin/mac" "mac"
    cd ..
fi

if ! [ -e "opt/svg2pdf-$SVG2PDFV" ]
then
    git clone git://people.freedesktop.org/~cworth/svg2pdf || exit 1
    cd svg2pdf
    git co "$SVG2PDFV"
    make || exit 1
    mkdir "../opt/svg2pdf-$SVG2PDFV"
    cp svg2pdf "../opt/svg2pdf-$SVG2PDFV"
    cd ../opt
    ln -nsf "svg2pdf-$SVG2PDFV" svg2pdf
    cd ../.bin
    ln -nsf "../opt/svg2pdf-$SVG2PDFV/svg2pdf"
    cd ..
    rm -rf "svg2pdf"
fi

if ! [ -e ".bin/text2pdf" ]
then
    wget http://www.eprg.org/pdfcorner/text2pdf/text2pdf.c
    gcc -o .bin/text2pdf text2pdf.c
    rm text2pdf.c
fi

if ! [ -e ".bin/sfnt2woff" -a -e ".bin/woff2sfnt" ]
then
    mkdir sfnt2woff
    cd sfnt2woff
    wget http://people.mozilla.com/~jkew/woff/woff-code-latest.zip
    unzip woff-code-latest.zip
    make || exit 1
    cp woff2sfnt ../.bin
    cp sfnt2woff ../.bin
    cd ..
    rm -rf sfnt2woff
fi

if ! [ -e ".bin/mutt-ics" ]
then
    cd "$HOME/opt"
    git clone https://github.com/dmedvinsky/mutt-ics || exit 1
    cd mutt-ics
    pip install -r requirements.txt || exit 1
    chmod +x src/main.py
    cd ../../.bin
    ln -s ../opt/mutt-ics/src/main.py mutt-ics
    cd ..
fi

if ! [ -e "opt/leptonica-$LEPTONICAV" ]
then
    pushd .
    curl -L "http://leptonica.googlecode.com/files/leptonica-${LEPTONICAV}.tar.bz2" | tar jxf - && cd "leptonica-$LEPTONICAV" || exit 1
    ./configure --with-libtiff --with-giflib --with-jpeg --with-libpng --with-zlib --enable-programs --prefix=$HOME/opt/leptonica-$LEPTONICAV && make && make install || exit 1
    cd ..
    rm -rf "leptonica-$LEPTONICAV"
    popd
fi

if ! [ -e "opt/jbig2enc-$JBIG2ENCV" ]
then
    pushd .
    cd "repos/git/jbig2enc" && git co "$JBIG2ENCV" && ./autogen.sh || exit 1
    LDFLAGS="-L$HOME/opt/leptonica-$LEPTONICAV/lib -Wl,--rpath=$HOME/opt/leptonica-$LEPTONICAV/lib,--enable-new-dtags" CPPFLAGS="-I$HOME/opt/leptonica-$LEPTONICAV/include" ./configure --prefix=$HOME/opt/jbig2enc-$JBIG2ENCV && make && make install || exit 1
    cd "$HOME/opt"
    ln -nsf "jbig2enc-$JBIG2ENCV" "jbig2enc"
    cd ../.bin
    ln -nsf "../opt/jbig2enc/bin/jbig2"
    popd
fi

if ! [ -e "opt/gitsh-$GITSHV" ]
then
    curl -L "https://github.com/thoughtbot/gitsh/archive/v${GITSHV}.tar.gz" | tar zxf - || exit 1
    cd "gitsh-${GITSHV}"
    ./autogen.sh && RUBY="$(which ruby)" ./configure --prefix="$HOME/opt/gitsh-$GITSHV" && make && make install || exit 1
    cd ..
    rm -rf "gitsh-${GITSHV}"
    cd opt
    ln -nsf "gitsh-${GITSHV}" "gitsh"
    cd ../.bin
    ln -nsf "../opt/gitsh/bin/gitsh"
    cd ..
fi

if ! [ -e "opt/pdflib-lite-$PDFLIBV" ]
then
    curl -L "http://www.pdflib.com/binaries/PDFlib/${PDFLIBVV}/PDFlib-Lite-${PDFLIBV}.tar.gz" | tar zxf - || exit 1
    cd "PDFlib-Lite-${PDFLIBV}" && ./configure --prefix="$HOME/opt/pdflib-lite-${PDFLIBV}" && make && make install && cd .. && rm -rf "PDFlib-Lite-${PDFLIBV}" || exit 1
    cd "opt" && ln -nsf "pdflib-lite-${PDFLIBV}" "pdflib-lite" && cd .. || exit 1
    cd ".bin" && (for BIN in $(ls "../opt/pdflib-lite/bin/"*); do ln -nsf "$BIN"; done) && cd .. || exit 1
fi

if [ "$ENABLE_SYSDIG" = "yes" -a ! -e "opt/sysdig-$SYSDIGV" ]
then
    (cd "repos/git/sysdig" && git archive --format=tar --prefix=sysdig-build/ "$SYSDIGV") | tar xf - || exit 1
    cd sysdig-build && mkdir build && cd build && cmake -DCMAKE_INSTALL_PREFIX:PATH="$HOME/opt/sysdig-$SYSDIGV" .. && make && make install && cd ../.. && rm -rf sysdig-build || exit 1
    cd opt && ln -nsf "sysdig-$SYSDIGV" "sysdig" && cd .. || exit 1
    cd "opt/sysdig/src/sysdig-0.1.1-dev/" && make && cd ../../../.. || exit 1
    cd .bin && ln -nsf "../opt/sysdig/bin/sysdig" && cd .. || exit 1
fi

if [ "$ENABLE_QTKEYCHAIN" = "yes" -a ! -e "opt/qtkeychain-$QTKEYCHAINV" ]
then
    cd "repos/git/qtkeychain" && git clean -fxd . && git reset --hard && git co "$QTKEYCHAINV" || exit 1
    DIR="$(mktemp --directory)"
    cd "$DIR" || exit 1
    echo "Build directory: $(pwd)"
    cmake -DCMAKE_INSTALL_PREFIX:PATH="$HOME/opt/qtkeychain-$QTKEYCHAINV" -DQT_TRANSLATIONS_DIR:PATH="$HOME/opt/qtkeychain-$QTKEYCHAINV/share/qt/translations" "$HOME/repos/git/qtkeychain" && make all install || exit 1
    cd "$HOME" && rm -rf "$DIR"
    cd "$HOME/opt/qtkeychain-$QTKEYCHAINV/include" && ln -nsf "qt5keychain" "qtkeychain" && cd "$HOME" || exit 1
fi

if [ "$ENABLE_MIRALL" = "yes" -a ! -e "opt/mirall-$MIRALLV" ]
then
    cd "repos/git/mirall" && git co "v$MIRALLV" || exit 1
    DIR="$(mktemp --directory)"
    cd "$DIR" || exit 1
    echo "Build directory: $(pwd)"
    QTKEYCHAINSO="$HOME/opt/qtkeychain-$QTKEYCHAINV/lib/x86_64-linux-gnu/libqtkeychain.so"
    if [ ! -e "$QTKEYCHAINSO" ]
    then
        QTKEYCHAINSO="$HOME/opt/qtkeychain-$QTKEYCHAINV/lib64/libqt5keychain.so"
    fi
    cmake -DCMAKE_INSTALL_PREFIX:PATH="$HOME/opt/mirall-$MIRALLV" -DQTKEYCHAIN_INCLUDE_DIR="$HOME/opt/qtkeychain-$QTKEYCHAINV/include" -DQTKEYCHAIN_LIBRARY="$QTKEYCHAINSO" "$HOME/repos/git/mirall" && make all install || exit 1
    cd "$HOME" && rm -rf "$DIR"
    cd .bin && echo "LD_LIBRARY_PATH=\"\$HOME/opt/mirall-$MIRALLV/lib:\$HOME/opt/qtkeychain-$QTKEYCHAINV/lib/x86_64-linux-gnu\" \"\$HOME/opt/mirall-$MIRALLV/bin/owncloud\"" > owncloud && chmod +x owncloud && cd ..
    cd .bin && echo "LD_LIBRARY_PATH=\"\$HOME/opt/mirall-$MIRALLV/lib:\$HOME/opt/qtkeychain-$QTKEYCHAINV/lib/x86_64-linux-gnu\" \"\$HOME/opt/mirall-$MIRALLV/bin/owncloudcmd\"" > owncloudcmd && chmod +x owncloudcmd && cd ..
fi

if [ ! -e "texmf/tex/latex/biblatex-iso690" -o "$(cat texmf/tex/latex/biblatex-iso690/VERSION)" != "$BIBLATEXISO690V" ]
then
    (mkdir -p texmf/tex/latex && cd texmf/tex/latex && rm -rf biblatex-iso690 && curl -L https://github.com/michal-h21/biblatex-iso690/archive/${BIBLATEXISO690V}.tar.gz | tar zxf - && mv biblatex-iso690-${BIBLATEXISO690V} biblatex-iso690 && echo ${BIBLATEXISO690V} > biblatex-iso690/VERSION) || exit 1
fi

if ! [ -e "texmf/tex/latex/polyglossia" ]
then
    mkdir -p "texmf" && cd "texmf" && curl -L http://mirrors.ctan.org/install/macros/latex/contrib/polyglossia.tds.zip | nodezip -x /dev/stdin && cd .. || exit 1
fi

if [ "$ENABLE_FIT2TCX" = "yes" -a ! -e "opt/fit2tcx-$FIT2TCXV" ]
then
    (cd "repos/git/Fit2Tcx" && git archive --format=tar --prefix=fit2tcx-build/ "$FIT2TCXV") | tar xf - || exit 1
    cd fit2tcx-build && ./configure && make && mkdir -p "$HOME/opt/fit2tcx-$FIT2TCXV/bin" && cp "fit2tcx" "$HOME/opt/fit2tcx-$FIT2TCXV/bin" && cd .. && rm -rf "fit2tcx-build" || exit 1
    cd .bin && ln -nsf "../opt/fit2tcx-$FIT2TCXV/bin/fit2tcx" && cd .. || exit 1
fi

if [ "$ENABLE_VAGRANT" = "yes" -a ! -e "$GEM_DIR/gems/vagrant-$VAGRANTV" ]
then
    (cd "repos/git/vagrant" && git archive --format=tar --prefix=vagrant-build/ "v$VAGRANTV") | tar xf - || exit 1
    cd vagrant-build && bundle install && rake install && cd .. && rm -rf vagrant-build || exit 1
    vagrant plugin install vagrant-hostsupdater || exit 1
fi

function mkinstance {
    mkdir --parents ".varia/instances/$1"
    for TAG in 1V 2NRMS 3H
    do
        ln -nsf "$(which "$1")" ".varia/instances/$1/$TAG"
    done
}

rm -rf ".varia/instances"
mkinstance konqueror
mkinstance urxvt
