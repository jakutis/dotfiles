#!/usr/bin/env node

// TODO print count and average duration of locked and unlocked segments
// TODO print corrupt data (every lock must be followed by unlock and every unlock must be followed by lock)

const { readFile } = require('fs/promises')

const prefixLength = '2021-11-16T12:16:46+02:00 '.length
const filename = process.env.XDG_CONFIG_HOME + '/dotfiles/lock-screen.log'
const locale = 'lt-LT'

const oneHour = 1000 * 60 * 60
const oneMinute = 1000 * 60
const print = line => console.log(String(line || ''))
const toPrettyString = data => JSON.stringify(data, null, 2)
const toTotals = durations => durations.reduce((totalsByDay, {start, duration}) => {
  const day = toDay(start)
  const currentTotal = totalsByDay[day] || 0
  totalsByDay[day] = currentTotal + duration
  return totalsByDay
}, {})
const toDay = date => date.toLocaleDateString(locale)
const toTime = date => date.toLocaleTimeString(locale)
const toDurations = (logs, startLabel, finishLabel) => logs.reduce((durations, {time, text}, i, logs) => {
  if (!text.startsWith(startLabel) || !logs[i - 1]) {
    return durations
  }
  const { time: previousTime, text: previousText, comment: previousComment } = logs[i - 1]
  if (!previousText.startsWith(finishLabel)) {
    return durations
  }
  if (toDay(previousTime) !== toDay(time)) {
    return durations
  }
  const duration = time.getTime() - previousTime.getTime()
  return durations.concat({
    start: previousTime,
    comment: previousComment,
    duration,
  })
}, [])
const toHours = totalsByDay => Object.entries(totalsByDay).reduce((hoursByDay, [day, total]) => {
  hoursByDay[day] = total / oneHour
  return hoursByDay
}, {})
const formatMinutes = minutes => Math.round(minutes) + ' min'
const analyze = (logs, startLabel, finishLabel) => {
  const durations = toDurations(logs, startLabel, finishLabel)
  const hours = toHours(toTotals(durations))
  return {hours, durations}
}
const printAnalysis = (analyses) => {
  const byDay = {}
  analyses.forEach(({label, analysis: {hours, durations}}) => {
    Object.keys(hours).forEach(day => {
      byDay[day] = byDay[day] || {
        segments: {},
        hours: {}
      }
      byDay[day].hours[label] = hours[day]
    })
    let previousDay
    durations.forEach(({start, duration, comment}) => {
      const day = toDay(start)
      const time = toTime(start)
      const minutes = Math.round(duration / oneMinute)
      if (minutes === 0) {
        return
      }

      if (day !== previousDay) {
        previousDay = day
      }
      byDay[day].segments[label] = byDay[day].segments[label] || []
      byDay[day].segments[label].push({
        time,
        minutes,
        comment
      })
    })
  })

  const days = Object.keys(byDay);
  days.sort((a, b) => a < b ? 1 : -1)
  days.forEach(day => {
    const { segments, hours } = byDay[day]
    print('# ' + day)
    print()
    Object.keys(segments).forEach(label => {
      print(label + ' (' + hours[label].toFixed(1) + ' hours)')
      segments[label].forEach(({time, minutes, comment}) => {
        print(time + '\t' + formatMinutes(minutes) + '\t' + comment)
      })
      print()
    })
  })
}
const toLog = (line) => {
  const time = new Date(line.substr(0, prefixLength).trim())
  const [rawText, rawComment] = line.substr(prefixLength).trim().split('#')
  const text = rawText.trim()
  const comment = rawComment?.trim() || ''
  return { time, text, comment }
}

const main = async () => {
  const lines = String(await readFile(filename)).trim().split('\n').map(s => s.trim())
  const logs = lines.map(line => toLog(line))

  const lastLog = logs[logs.length - 1]
  const minutesSinceLastLog = (Date.now() - lastLog.time.getTime()) / oneMinute
  print('Time since last log: ' + formatMinutes(minutesSinceLastLog))
  print()

  const unlocked = analyze(logs, 'lock', 'unlock')
  const locked = analyze(logs, 'unlock', 'lock')
  printAnalysis([{label: 'locked', analysis: locked}, {label: 'unlocked', analysis: unlocked}])
}
main().catch(err => print('Error: ' + err.stack))
