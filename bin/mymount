#!/usr/bin/env bash

if [ -z "$1" ]
then
    echo "Please specify the mount"
    exit 1
fi

MOUNT="$1"
if [[ "$MOUNT" =~ : ]]
then
    SUBMOUNT="${MOUNT#*:}"
    MOUNT="${MOUNT%:*}"
fi

DIR="/mnt/$MOUNT"

if [ -z "$(mount | grep " $DIR ")" ]
then
    echo "Mounting $DIR"
    if [ "$MOUNT" = "desktop" ]
    then
        sudo bash -c "mkdir -p "$DIR";chown $USER: "$DIR""
        wake "$(cat "$HOME/.varia/desktop/network/ip-wake")" "$(cat "$HOME/.varia/desktop/network/mac")"
        sshfs -o reconnect -p "$(cat "$HOME/.varia/desktop/network/port")" "$(cat "$HOME/.varia/desktop/network/user")@$(cat "$HOME/.varia/desktop/network/ip"):/" "$DIR"
    elif [ "$MOUNT" = "server" ]
    then
        sudo bash -c "mkdir -p "$DIR";chown $USER: "$DIR""
        sshfs -o reconnect,allow_root jakutis@jakut.is:/ "$DIR"
    elif [ "$MOUNT" = "owncloud" ]
    then
        sudo bash -c "mkdir -p "$DIR";chown $USER: "$DIR""
        sudo mount -t davfs -o uid=jakutis https://vytautasjakutis.com/remote.php/webdav "$DIR"
    elif [ "$MOUNT" = "android" ]
    then
        if [ -z "$SUBMOUNT" ]
        then
          SUBMOUNT="1"
        fi
        sudo bash -c "mkdir -p "$DIR";chown $USER: "$DIR";simple-mtpfs --device "$SUBMOUNT" "$DIR" -o gid=$(id -u),allow_other"
    elif [ "$MOUNT" = "ipad" ]
    then
        echo "Make sure usbmuxd is running as root, e.g.: /home/jakutis/opt/usbmuxd-1.1.0/sbin/usbmuxd -f -v"
        sudo bash -c "mkdir -p "$DIR";chown $USER: "$DIR""
        if [ -z "$SUBMOUNT" ]
        then
            ifuse "$DIR"
        else
            ifuse --documents "$SUBMOUNT" "$DIR"
        fi
    elif [ "$MOUNT" = "floppy" ]
    then
        if [ -z "$SUBMOUNT" ]
        then
            for BASE in mmcblk sd
            do
                MOUNT="$(ls --sort=time /dev/${BASE}?|head -n 1)"
                if [ -n "$MOUNT" ]
                then
                    MOUNT="$(ls --sort=none ${MOUNT}*|tail -n 1)"
                    break
                fi
            done
            sudo bash -c "mkdir -p "$DIR" && chown $USER: "$DIR" && mount -o uid=$(id -u) "$MOUNT" "$DIR""
        else
            sudo bash -c "mkdir -p "$DIR" && chown $USER: "$DIR" && mount -o loop,uid=$(id -u) \"$SUBMOUNT\" "$DIR""
        fi
    else
        sudo bash -c "mkdir -p "$DIR" && chown $USER: "$DIR" && mount "$DIR""
    fi
else
    echo "Unmounting $DIR"
    sudo bash -c "umount -f "$DIR""
fi
