#!/usr/bin/env bash

SELF="$0"
LANG_COMMAND="$1"
LANG_LANG="$2"
LANG_VERSION="$3"

export PYENV_ROOT="$HOME/.pyenv"

function latest_version_python {
  curl --silent https://www.python.org/downloads/ | grep 'https://www.python.org/ftp/python/'|sed -e 's/.*https:\/\/www\.python\.org\/ftp\/python\///'|sed -e 's/\/.*//'|sort --reverse --version-sort|uniq || true
}

function latest_version_node {
  curl --silent https://nodejs.org/en/ | grep 'https://nodejs.org/dist/v'|sed -e 's/.*https:\/\/nodejs.org\/dist\/v//'|sed -e 's/\/.*//'|sort --reverse --version-sort|uniq || true
}

function latest_version_scala {
  curl --silent https://www.scala-lang.org/blog/announcements/|grep -i ' is now available!'|sed -e 's/.*\/news\///'|sed -e 's/".*//'|sort --reverse --version-sort || true
}

function latest_version_java {
  curl --silent https://www.oracle.com/java/technologies/|grep 'javase-downloads.html\#'|sed -e 's/.*Java SE //'|sed -e 's/[^.0-9u].*//'|sort --reverse --version-sort
}

#  function latest_version_sbt {
#    curl --silent https://www.scala-sbt.org/download.html|grep https://piccolo.link/sbt-|sed -e 's/.*https:\/\/piccolo.link\/sbt-//'|sed -e 's/\([0-9.]*\)\..*/\1/'|sort --version-sort -r|head -n1
#  }

function latest_version_kotlin {
  curl --verbose https://github.com/JetBrains/kotlin/releases/latest 2>&1 1>/dev/null|grep https://github.com/JetBrains/kotlin/releases/tag/|sed -e 's/.*tag\/v//'|sort --reverse --version-sort
}

function latest_version_rust {
  curl --silent https://www.rust-lang.org/|grep download-link|sed -e 's/.*Version //'|sed -e 's/<.*//'|sort --reverse --version-sort
}

function latest_version_ruby {
  curl --silent https://www.ruby-lang.org/en/downloads/|grep 'https://cache.ruby-lang.org/pub/ruby/[0-9]'|sed -e 's/.*Ruby //'|sed -e 's/<.*//'|sort --reverse --version-sort|grep -v '^3'
}

function latest_version_r {
  curl --silent https://www.r-project.org/|grep https://cran.r-project.org/src/base/|sed -e 's/.*R version //'|sed -e 's/ .*//'|sort --reverse --version-sort
}

function latest_version_go {
  curl --silent https://golang.org/dl/|grep /dl/go|grep linux-amd64.tar.gz|sed -e 's/.*\/dl\/go//'|sed -e 's/\.linux-amd64\.tar\.gz.*//'|sort --reverse --version-sort|uniq|head -n 5
}

function install_packages_r {
  PACKAGES=$(cat "$HOME/.rpackages") || exit 1
  for PACKAGE in $PACKAGES
  do
      echo "Installing $PACKAGE"
      echo "install.packages(c(\"${PACKAGE}\"), repos=c(\"http://cran.us.r-project.org\", dependencies=TRUE))" | R --no-save || exit 1
  done
}

function install_packages_node {
  npm install -g npm || exit 1

  PACKAGES=$(cat "$HOME/.nodepackages") || exit 1
  for PACKAGE in $PACKAGES
  do
      echo "Installing $PACKAGE"
      npm install -g $PACKAGE || exit 1
  done
}

function install_packages_ruby {
  PACKAGES=$(cat "$HOME/.rubypackages") || exit 1
  for PACKAGE in $PACKAGES
  do
      echo "Installing $PACKAGE"
      gem install $PACKAGE || exit 1
  done
  #LDFLAGS="-Wl,--rpath=$HOME/opt/graphicsmagick-$GRAPHICSMAGICKV/lib,--enable-new-dtags" CFLAGS="-I$HOME/opt/graphicsmagick-$GRAPHICSMAGICKV/include" CXXFLAGS="-I$HOME/opt/graphicsmagick-$GRAPHICSMAGICKV/include" PKG_CONFIG_PATH="$HOME/opt/graphicsmagick-$GRAPHICSMAGICKV/lib/pkgconfig" gem install jekyll kramdown pdfbeads rmagick iconv hpricot compass travis-lint metaclass blankslate haml bundler lolcat || exit 1
  rvm docs generate-ri || exit 1
}

function install_packages_python {
  pip install --upgrade pip || exit 1

  PACKAGES=$(cat "$HOME/.pythonpackages") || exit 1
  for PACKAGE in $PACKAGES
  do
      echo "Installing $PACKAGE"
      pip install $PACKAGE || exit 1
  done
}

if [ "$LANG_COMMAND" = "fastuse" ]
then
  if [ "$LANG_LANG" = "node" ]
  then
    export PATH="$HOME/.nvm/versions/node/v$(cat "$HOME/.nvm/alias/default")/bin:$PATH"
  elif [ "$LANG_LANG" = "python" ]
  then
    export PATH="$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH"
  elif [ "$LANG_LANG" = "ruby" ]
  then
    LANG_VERSION="$(grep default= "$HOME/.rvm/config/alias"|cut -b14-)"
    export RUBY_VERSION="ruby-$LANG_VERSION"
    export GEM_HOME="$HOME/.rvm/gems/$RUBY_VERSION"
    export GEM_PATH="$HOME/.rvm/gems/$RUBY_VERSION:$HOME/.rvm/gems/${RUBY_VERSION}@global"
    export IRBRC="$HOME/.rvm/rubies/$RUBY_VERSION/.irbrc"
    export MY_RUBY_HOME="$HOME/.rvm/rubies/$RUBY_VERSION"
    export PATH="$HOME/.rvm/gems/$RUBY_VERSION/bin:$HOME/.rvm/gems/${RUBY_VERSION}@global/bin:$HOME/.rvm/rubies/$RUBY_VERSION/bin:$HOME/.rvm/bin:$PATH"
  fi
elif [ "$LANG_COMMAND" = "resolve_executable" ]
then
  if [ "$LANG_LANG" = "node" ]
  then
    EXE="$3"
    NM="node_modules"
    while true
    do
      if [ -e "$NM/.bin/$EXE" ]
      then
        break
      fi
      if [ "$(realpath "$NM")" = "/node_modules" ]
      then
        NM=
        break
      fi
      NM="../$NM"
    done
    if [ -n "$NM" ]
    then
      echo "$NM/.bin/$EXE"
    else
      echo "$EXE"
    fi
  elif [ "$LANG_LANG" = "python" ]
  then
    EXE="$3"
    echo "$EXE"
  elif [ "$LANG_LANG" = "rust" ]
  then
    EXE="$3"
    echo "$EXE"
  fi
elif [ "$LANG_COMMAND" = "upgrade" ]
then
  function upgrade {
    LATEST_INSTALLED="$("$SELF" installed_versions "$1")"
    if [ "$?" != "0" ]
    then
      echo "Upgrading $1 is not supported (installed_versions command not supported)"
      return 1
    fi

    LATEST_INSTALLED="$(echo "$LATEST_INSTALLED" | sort --version-sort --reverse | head -n 1)"
    if [ -z "$LATEST_INSTALLED" ]
    then
      echo "Nothing to upgrade, $1 is not installed"
      if [ "$IGNORE_NOT_INSTALLED" == "yes" ]
      then
        return 0
      else
        return 1
      fi
    fi

    LATEST_AVAILABLE="$("latest_version_$1" 2>&1)"
    if [ "$?" != "0" ]
    then
      echo "Upgrading $1 is not supported (latest_versions command not supported)"
      return 1
    fi

    LATEST_AVAILABLE="$(echo "$LATEST_AVAILABLE" | sort --version-sort --reverse | head -n 1)"
    if [ "$LATEST_AVAILABLE" = "$LATEST_INSTALLED" ]
    then
      echo "No need to upgrade $1, already latest: $LATEST_AVAILABLE"
      return 0
    fi

    echo "Upgrading $1 to $LATEST_AVAILABLE"
    "$SELF" install "$1" "$LATEST_AVAILABLE" || exit 1
  }
  if [ -z "$LANG_LANG" -o "$LANG_LANG" = "all" ]
  then
    IGNORE_NOT_INSTALLED=yes upgrade ruby
    IGNORE_NOT_INSTALLED=yes upgrade r
    IGNORE_NOT_INSTALLED=yes upgrade node
    IGNORE_NOT_INSTALLED=yes upgrade python
    IGNORE_NOT_INSTALLED=yes upgrade java
  else
    upgrade "$LANG_LANG"
  fi
elif [ "$LANG_COMMAND" = "is_installed" ]
then
  if [ -z "$LANG_LANG" -o "$LANG_LANG" = "all" ]
  then
    echo "Error: language name not provided"
    exit 2
  else
    VERSIONS="$("$SELF" installed_versions "$LANG_LANG")"
    CODE="$?"
    if [ "$CODE" = "0" ]
    then
      echo "$VERSIONS" | while read V
      do
        if [ "$V" = "$LANG_VERSION" ]
        then
          exit 1
        fi
      done
      CODE="$?"
      if [ "$CODE" = "0" ]
      then
        echo "Not installed"
        exit 1
      else
        echo "Installed"
        exit 0
      fi
    else
      exit "$CODE"
    fi
  fi
elif [ "$LANG_COMMAND" = "installed_versions" ]
then
  if [ "$LANG_LANG" = "ruby" ]
  then
    ls "$HOME/.rvm/rubies/"|grep -v default|sed -e 's/^ruby-//'
  elif [ "$LANG_LANG" = "python" ]
  then
    ls "$HOME/.pyenv/versions"
  elif [ "$LANG_LANG" = "node" ]
  then
    ls "$HOME/.nvm/versions/node" | sed -e 's/^v//'
  elif [ "$LANG_LANG" = "r" ]
  then
    ls "$HOME/opt" | grep "^r-" | sed -e 's/^r-//'
  elif [ "$LANG_LANG" = "java" ]
  then
    ls "$HOME/opt" | grep "^jdk-" | sed -e 's/^jdk-//'
  elif [ "$LANG_LANG" = "erlang" ]
  then
    ls "$HOME/opt" | grep "^erlang-" | sed -e 's/^erlang-//'
  elif [ -z "$LANG_LANG" -o "$LANG_LANG" = "all" ]
  then
    for L in ruby python node erlang r java
    do
      echo "# $L"
      "$SELF" installed_versions "$L"
      echo
    done
  else
    exit 2
  fi
elif [ "$LANG_COMMAND" = "use" ]
then
  if [ "$LANG_LANG" = "node" ]
  then
    if [ -z "$LANG_VERSION" ]
    then
      LANG_VERSION="default"
    fi
    source "$HOME/.nvm/nvm.sh" && nvm use "$LANG_VERSION" 1>/dev/null || exit 1
  elif [ "$LANG_LANG" = "r" ]
  then
    R_HOME="$HOME/opt/r-$LANG_VERSION"
    if [ ! -e "$R_HOME" ]
    then
      exit 1
    fi
    export TEXINPUTS="$TEXINPUTS:$R_HOME/lib/R/share/texmf/tex/latex"
    export PATH="$R_HOME/bin:$PATH"
  elif [ "$LANG_LANG" = "cuda" ]
  then
    export CUDA_HOME="$HOME/opt/cuda-$LANG_VERSION"
    if [ ! -e "$CUDA_HOME" ]
    then
      exit 1
    fi
    export PATH="$CUDA_HOME/bin:$PATH"
    export LD_LIBRARY_PATH="$CUDA_HOME/lib64:$CUDA_HOME/lib"
  elif [ "$LANG_LANG" = "rust" ]
  then
    export PATH="$HOME/.cargo/bin:$PATH"
    if [ -n "$LANG_VERSION" ]
    then
      rustup default "$LANG_VERSION" || exit 1
    fi
  elif [ "$LANG_LANG" = "llvm" ]
  then
    export LLVM_ROOT="$HOME/opt/llvm-$LANG_VERSION"
    if [ ! -e "$LLVM_ROOT" ]
    then
      exit 1
    fi
    export PATH="$LLVM_ROOT/bin:$PATH"
  elif [ "$LANG_LANG" = "java" ]
  then
    export JAVA_HOME="$HOME/opt/jdk-$LANG_VERSION"
    if [ ! -e "$JAVA_HOME" ]
    then
      exit 1
    fi
    export PATH="$JAVA_HOME/bin:$PATH"
  elif [ "$LANG_LANG" = "perl" ]
  then
    if [ -z "$LANG_VERSION" ]
    then
      LANG_VERSION="default"
    fi
    [[ -s "$PERLBREW_ROOT/etc/bashrc" ]] && source "$PERLBREW_ROOT/etc/bashrc" && perlbrew use "$LANG_VERSION" || exit 1
  elif [ "$LANG_LANG" = "kotlin" ]
  then
    if [ ! -e "$HOME/opt/kotlin-$LANG_VERSION" ]
    then
      exit 1
    fi
    export PATH="$HOME/opt/kotlin-$LANG_VERSION/bin:$PATH"
  elif [ "$LANG_LANG" = "erlang" ]
  then
    if [ ! -e "$HOME/opt/erlang-$LANG_VERSION" ]
    then
      exit 1
    fi
    export PATH="$HOME/opt/erlang-$LANG_VERSION/bin:$PATH"
  elif [ "$LANG_LANG" = "ghc" ]
  then
    if [ ! -e "$HOME/opt/ghc-$LANG_VERSION" ]
    then
      exit 1
    fi
    export PATH="$HOME/opt/ghc-$LANG_VERSION/bin:$PATH"
  elif [ "$LANG_LANG" = "gcc" ]
  then
    if [ ! -e "$HOME/opt/gcc-$LANG_VERSION" ]
    then
      exit 1
    fi
    export PATH="$HOME/opt/gcc-$LANG_VERSION/bin:$PATH"
  elif [ "$LANG_LANG" = "go" ]
  then
    if [ -z "$LANG_VERSION" ]
    then
      LANG_VERSION="default"
    fi
    [[ -s "$GVM_ROOT/scripts/gvm-default" ]] && source "$GVM_ROOT/scripts/gvm-default" && gvm use "$LANG_VERSION" 1>/dev/null || exit 1
  elif [ "$LANG_LANG" = "ocaml" ]
  then
    [[ -s "$HOME/.opam/opam-init/init.sh" ]] && source "$HOME/.opam/opam-init/init.sh" 1>/dev/null 2>/dev/null || exit 1
  elif [ "$LANG_LANG" = "php" ]
  then
    if [ -z "$LANG_VERSION" ]
    then
      LANG_VERSION="$(cat "$HOME/.php")"
    fi
    [[ -s "$HOME/opt/php-version/php-version.sh" ]] && source "$HOME/opt/php-version/php-version.sh" && php-version "$LANG_VERSION" || exit 1
    export PATH="$HOME/.composer/vendor/bin:$PATH"
  elif [ "$LANG_LANG" = "python" ]
  then
    export PATH="$PYENV_ROOT/bin:$PATH"
    if [ -z "$LANG_VERSION" ]
    then
      LANG_VERSION="$(pyenv global)"
    fi
    [[ -s "$PYENV_ROOT" ]] && eval "$(pyenv init -)" && pyenv shell "$LANG_VERSION" || exit 1
  elif [ "$LANG_LANG" = "ruby" ]
  then
    if [ -z "$LANG_VERSION" ]
    then
      LANG_VERSION="default"
    fi
    [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" && rvm "$LANG_VERSION" 2>/dev/null || exit 1
  else
    echo unrecognized language: $LANG_LANG 1>&2
    exit 1
  fi
elif [ "$LANG_COMMAND" = "default" ]
then
  if [ -z "$LANG_LANG" ]
  then
      echo "Please specify language" >&2
      exit 1
  fi

  if [ -z "$LANG_VERSION" ]
  then
    if [ "$LANG_LANG" = "node" ]
    then
      source "$HOME/.nvm/nvm.sh" && nvm alias default || exit 1
    fi
  else
    if [ "$LANG_LANG" = "node" ]
    then
      source "$HOME/.nvm/nvm.sh" && nvm alias default "$LANG_VERSION" || exit 1
    fi
  fi
elif [ "$LANG_COMMAND" = "install_packages" ]
then
  if [ -z "$LANG_LANG" ]
  then
      echo "Please specify language" >&2
      exit 1
  fi

  install_packages_$LANG_LANG
elif [ "$LANG_COMMAND" = "install" ]
then
  if [ -z "$LANG_LANG" ]
  then
      echo "Please specify language" >&2
      exit 1
  fi

  if [ -z "$LANG_VERSION" ]
  then
      LATEST_AVAILABLE="$("latest_version_$LANG_LANG" 2>&1)"
      if [ "$?" != "0" ]
      then
        echo "To install $LANG_LANG, please specify version" >&2
        exit 1
      fi
      LANG_VERSION="$(echo "$LATEST_AVAILABLE" | sort --version-sort --reverse | head -n 1)"
  fi

  if [ "$LANG_LANG" = "node" ]
  then
    if ! [ -e "$HOME/.nvm" ]
    then
        git clone https://github.com/creationix/nvm "$HOME/.nvm" || exit 1
    else
        cd "$HOME/.nvm" && git pull --rebase && cd - || exit 1
    fi

    source "$HOME/.nvm/nvm.sh" && nvm install "$LANG_VERSION" && nvm use "$LANG_VERSION" || exit 1

    install_packages_node
  elif [ "$LANG_LANG" = "java" ]
  then
    TAR="jdk-${LANG_VERSION}_linux-x64_bin.tar.gz"
    if [ ! -e "$TAR" ]
    then
      echo Please place $TAR in $(pwd) and press enter
      read
    fi
    if [ ! -e "$TAR" ]
    then
      echo Error: cannot find $TAR in $(pwd)
      exit 1
    fi
    tar xzvf "$TAR" && mv "jdk-$LANG_VERSION" "$HOME/opt" || exit 1
  elif [ "$LANG_LANG" = "r" ]
  then
    mkdir r-build && cd r-build && curl -L "https://cran.r-project.org/src/base/R-${LANG_VERSION%%.*}/R-${LANG_VERSION}.tar.gz" | tar zx && cd "R-${LANG_VERSION}" || exit 1
    ./configure --with-tcltk --with-tcl-config=/usr/lib/tclConfig.sh --with-tk-config=/usr/lib/tkConfig.sh --without-recommended-packages --enable-R-shlib --prefix="$HOME/opt/r-$LANG_VERSION" && make && make install && cd ../.. && rm -rf r-build || exit 1
    export R_HOME="$HOME/opt/r-$LANG_VERSION"
    export TEXINPUTS="$TEXINPUTS:$R_HOME/lib/R/share/texmf/tex/latex"
    export PATH="$R_HOME/bin:$PATH"
    install_packages_r
  elif [ "$LANG_LANG" = "ruby" ]
  then
    if ! [ -e "$HOME/.rvm" ]
    then
        curl -L https://get.rvm.io | rvm_path="$HOME/.rvm" bash -s stable --ruby="$LANG_VERSION" --ignore-dotfiles --autolibs=read-fail && source "$HOME/.rvm/scripts/rvm" || exit 1
    else
        source "$HOME/.rvm/scripts/rvm" && rvm get head || exit 1

        if [ -e "$HOME/.rvm/rubies/ruby-$LANG_VERSION" ]
        then
          echo "already installed at $HOME/.rvm/rubies/ruby-$LANG_VERSION"
          exit 1
        fi

        rvm install "$LANG_VERSION" || exit 1
    fi

    rvm --default use "$LANG_VERSION" && rvm default || exit 1
    install_packages_ruby
  elif [ "$LANG_LANG" = "python" ]
  then
    if ! [ -e "$PYENV_ROOT" ]
    then
        git clone https://github.com/pyenv/pyenv "$PYENV_ROOT" || exit 1
    else
        cd "$PYENV_ROOT" && git pull --rebase && cd - || exit 1
    fi

    if [ -e "$PYENV_ROOT/versions/$LANG_VERSION" ]
    then
      echo "already installed at $PYENV_ROOT/versions/$LANG_VERSION"
      exit 1
    fi

    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init -)" && pyenv install "$LANG_VERSION" && pyenv global "$LANG_VERSION" && pyenv shell "$(pyenv global)" || exit 1

    install_packages_python
  elif [ "$LANG_LANG" = "rust" ]
  then
    export PATH="$HOME/.cargo/bin:$PATH"
    if ! [ -e "$HOME/.cargo" ]
    then
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --quiet -y --no-modify-path || exit 1
    else
        rustup self update || exit 1
    fi
    rustup toolchain install "$LANG_VERSION" --allow-downgrade && rustup default "$LANG_VERSION" || exit 1
  fi
  echo "install success"
elif [ "$LANG_COMMAND" = "latest_version" ]
then
  "latest_version_$LANG_LANG"|head -n 1
elif [ "$LANG_COMMAND" = "latest_versions" ]
then
  function latest_version {
    echo "# $1"
    "latest_version_$1"
    echo
  }

  if [ -z "$LANG_LANG" -o "$LANG_LANG" = "all" ]
  then
    latest_version "go"
    latest_version "r"
    latest_version "ruby"
    latest_version "java"
    latest_version "node"
    latest_version "python"
    latest_version "kotlin"
    latest_version "scala"
    latest_version "rust"
  else
    latest_version "$LANG_LANG"
  fi
elif [ "$LANG_COMMAND" = "versions" ]
then
  function check {
    NAME="$2"
    if [ -z "$NAME" ]
    then
      NAME="$1"
    fi

    BIN=$(which "$1" 2>/dev/null)
    if [ -n "$BIN" ]
    then
      echo "# $NAME -> $BIN"
      echo ===============================
    else
      echo "# $NAME -> NONE"
      echo ===============================
      return 1
    fi
  }

  check ruby && ruby --version || true
  echo

  check node && node --version || true
  echo

  check python && python --version || true
  echo

  check java && java -version || true
  echo

  check rustc rust && rustc --version || true
  echo

  check php && php --version || true
  echo

  check ocaml && ocaml --version || true
  echo

  check go && go version || true
  echo

  check gcc && gcc --version || true
  echo

  check ghc && ghc --version || true
  echo

  check erl erlang && erl -version || true
  echo

  check kotlinc kotlin && kotlinc -version || true
  echo

  check perl && perl --version || true
  echo

  check clang llvm && clang --version || true
  echo

  check R r && R --version || true
  echo

  check nvcc cuda && nvcc --version || true
  echo

fi
