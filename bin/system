#!/usr/bin/env bash

CMD="$1"

if ! ([ "$(id -u)" = "0" ]) && ! ( ([ "$CMD" = "brightness" ]) && ([ -w "$XDG_CONFIG_HOME/dotfiles/brightness/brightness" ]) ) && ! ([ "$CMD" = "screens" ]) && ! ([ "$CMD" = "battery" ]) && ! ([ "$CMD" = "suspend" ]) && ! ([ "$CMD" = "keyboard" ])
then
  ARGS="$@"
  if tty --silent
  then
      SUDO="sudo"
  else
      SUDO="pkexec"
  fi
  $SUDO -- bash -c "XDG_CONFIG_HOME="$XDG_CONFIG_HOME" XDG_DATA_HOME="$XDG_DATA_HOME" XAUTHORITY="$HOME/.Xauthority" HOME="$HOME" "$0" $ARGS"
  exit
fi

DOTFILES="$(cat "$XDG_CONFIG_HOME/dotfiles/dotfiles")"
VARIA="$(cat "$XDG_CONFIG_HOME/dotfiles/varia")"
MACHINE="$(cat "$XDG_CONFIG_HOME/dotfiles/machine")"

function help {
    echo "Available commands: help hibernate suspend poweroff shutdown reboot restart net screens battery brightness fan keyboard"
}

function powersave {
  if [ "$(id -u)" != "0" ]
  then
    return
  fi
  for NET in $(ls /sys/class/net)
  do
      ethtool -s "$NET" wol d
      iw dev "$NET" set power_save on
  done
  for PCI in $(ls /sys/bus/pci/devices/*/power/control)
  do
      echo "auto" > "$PCI"
  done
  for SCSI in $(ls /sys/class/scsi_host/host*/link_power_management_policy)
  do
      echo "min_power" > "$SCSI"
  done
  for USB in $(ls /sys/bus/usb/devices/*/power/control)
  do
      echo "on" > "$USB"
  done
  echo "1500" > "/proc/sys/vm/dirty_writeback_centisecs"
  echo "0" > "/sys/module/usbcore/parameters/autosuspend"
  echo "1" > "/sys/module/snd_hda_intel/parameters/power_save"
  #echo "0" > "$("$HOME/bin/sysname" "/sys/class/rfkill" "tpacpi_bluetooth_sw")/state"
  #sleep 1
  #rmmod btusb bluetooth
}

function fan {
  LEVEL="$1"
  IBM="/proc/acpi/ibm/fan"
  APPLE="/sys/devices/platform/applesmc.768"
  if [ -e "$IBM" ]
  then
    if [ -z "$LEVEL" ]
    then
      cat "$IBM"
    else
      if [ "$LEVEL" = "minimum" -o "$LEVEL" = "min" -o "$LEVEL" = "low" ]
      then
        LEVEL="0"
      elif [ "$LEVEL" = "medium" -o "$LEVEL" = "med" ]
      then
        LEVEL="4"
      elif [ "$LEVEL" = "maximum" -o "$LEVEL" = "max" -o "$LEVEL" = "high" ]
      then
        LEVEL="7"
      elif [ "$LEVEL" = "automatic" -o "$LEVEL" = "auto" ]
      then
        LEVEL="auto"
      fi
      # LEVEL can be number and auto and disengaged
      echo "level $LEVEL" > "$IBM"
    fi
  elif [ -e "$APPLE" ]
  then
    MIN=$(cat "$APPLE/fan1_min")
    MAX=$(cat "$APPLE/fan1_max")
    if [ -z "$LEVEL" ]
    then
      cat "$APPLE/fan1_output"
    else
      if [ "$LEVEL" = "minimum" -o "$LEVEL" = "min" -o "$LEVEL" = "low" ]
      then
        echo "1" > "$APPLE/fan1_manual"
        echo "$MIN" > "$APPLE/fan1_output"
      elif [ "$LEVEL" = "medium" -o "$LEVEL" = "med" ]
      then
        echo "1" > "$APPLE/fan1_manual"
        echo $((MIN+(MAX-MIN)/2)) > "$APPLE/fan1_output"
      elif [ "$LEVEL" = "maximum" -o "$LEVEL" = "max" -o "$LEVEL" = "high" ]
      then
        echo "1" > "$APPLE/fan1_manual"
        echo "$MAX" > "$APPLE/fan1_output"
      elif [ "$LEVEL" = "automatic" -o "$LEVEL" = "auto" ]
      then
        echo "0" > "$APPLE/fan1_manual"
      else
        echo "1" > "$APPLE/fan1_manual"
        echo "$LEVEL" > "$APPLE/fan1_output"
      fi
    fi
  else
    echo "Unrecognized fan device"
  fi
}

function power {
    FUNCTION="$1"

    if which systemctl 1>/dev/null 2>&1
    then
        systemctl "$FUNCTION"
    elif which "pm-$FUNCTION" 1>/dev/null 2>&1
    then
        "pm-$FUNCTION"
    else
        "$FUNCTION"
    fi
}

function screens {
    CFG="$1"
    shift

    IFS=' ' read -r -a CONNECTED <<< "$(xrandr | tr --squeeze-repeats ' ' ' ' | grep ' connected ' | cut --delimiter=' ' --fields=1 | paste -s -d ' ' -)"
    PRIMARY=$(xrandr | tr --squeeze-repeats ' ' ' ' | grep ' primary ' | cut --delimiter=' ' --fields=1 | paste -s -d ' ' -)
    N=$(echo "${CONNECTED[*]}" | wc -w)
    I=0
    while [ "$I" != "$N" ]
    do
      if [ "${CONNECTED[$I]}" = "$PRIMARY" ]
      then
        PRIMARY=$I
        break
      fi
      I=$((I + 1))
    done

    if [ -z "$CFG" ]
    then
      NEXT=$(((PRIMARY + 1) % N))
      NEXT=${CONNECTED[$NEXT]}

      for SCREEN in ${CONNECTED[*]}
      do
        echo xrandr --output "$SCREEN" --off
        xrandr --output "$SCREEN" --off
      done

      "$DOTFILES/screens/only" "$NEXT"
      set-background
      exit
    fi

    if [ -f "$DOTFILES/screens/$CFG" ]
    then
        SCREENS="$@"
        while [ -n "$1" ]
        do
          if [ -z "$(echo " ${CONNECTED[*]} " | grep " $1 ")" ]
          then
            echo "$1 not connected"
            exit 1
          fi
          shift
        done

        for SCREEN in ${CONNECTED[*]}
        do
          if [ -z "$(echo " $SCREENS " | grep " $SCREEN ")" ]
          then
            echo xrandr --output "$SCREEN" --off
            xrandr --output "$SCREEN" --off
          fi
        done

        "$DOTFILES/screens/$CFG" $SCREENS
        set-background
    else
        echo "Configuration is not a preset, parsing the definition"
        echo "Existing presets are:" 1>&2
        ls -1 "$DOTFILES/screens" 1>&2
        exit 1
    fi

    xset s off
    xset s noblank
    xset s 300
}

function brightness {
  DIR="$1"
  ARG="$2"
  if ! [ -d "$DIR" ]
  then
      echo "Symlink $DIR does not exist, please create it, e.g. ln -s /sys/devices/platform/applesmc.768/leds/smc::kbd_backlight \"$DIR\"" 1>&2
      exit 1
  fi
  CURRENT="$(cat "$DIR/brightness")"
  MAX="$(cat "$DIR/max_brightness")"
  MIN="0"
  RANGE=$(($MAX - $MIN))
  STEP=$(($RANGE / 20))

  if [ "$ARG" = "" ]
  then
      echo "$CURRENT"
  elif [ "$ARG" = "more" ]
  then
      if [ "$(($CURRENT + $STEP))" -gt "$MAX" ]
      then
          echo $MAX > "$DIR/brightness"
      else
          echo $(($CURRENT + $STEP)) > "$DIR/brightness"
      fi
  elif [ "$ARG" = "less" ]
  then
      if [ "$(($CURRENT - $STEP))" -lt "$MIN" ]
      then
          echo $MIN > "$DIR/brightness"
      else
          echo $(($CURRENT - $STEP)) > "$DIR/brightness"
      fi
  elif [ "$ARG" = "max" -o "$ARG" = "maximum" ]
  then
      echo "$MAX" > "$DIR/brightness"
  elif [ "$ARG" = "min" -o "$ARG" = "minimum" ]
  then
      echo "$MIN" > "$DIR/brightness"
  elif [ "${ARG:(-1)}" = "%" ]
  then
      PERCENT="${ARG::-1}"
      echo $(($MIN + $PERCENT * $RANGE / 100)) > "$DIR/brightness"
  else
      echo $ARG > "$DIR/brightness"
  fi
}

if [ -z "$CMD" ]
then
    echo "Error: no command given" 1>&2
    help 1>&2
    exit 1
fi

powersave

case "$CMD" in
    "keyboard")
        brightness "$XDG_CONFIG_HOME/dotfiles/keyboard" "$2"
        ;;
    "brightness")
        brightness "$XDG_CONFIG_HOME/dotfiles/brightness" "$2"
        ;;
    "battery")
        BATTERY="$XDG_CONFIG_HOME/dotfiles/battery"
        PREFIX="energy"
        if [ ! -e "$BATTERY/${PREFIX}_full_design" ]
        then
          PREFIX="charge"
        fi
        echo "After purchase: $(cat "$BATTERY/${PREFIX}_full_design")"
        echo "When full:      $(cat "$BATTERY/${PREFIX}_full")"
        echo "Now:            $(cat "$BATTERY/${PREFIX}_now")"
        echo "Mode:           $(cat "$BATTERY/status")"
        [ -r "$BATTERY/current_now" ] && echo "Current now:    $(cat "$BATTERY/current_now")"
        [ -r "$BATTERY/power_now" ] && echo "Power now:      $(cat "$BATTERY/power_now")"
        [ -r "$BATTERY/voltage_now" ] && echo "Voltage now:    $(cat "$BATTERY/voltage_now")"
        ;;
    "screens")
        shift
        screens "$@"
        ;;
    "net")
        "$VARIA/$MACHINE/rc.local.stop"
        "$VARIA/$MACHINE/rc.local.modem.stop"
        "$VARIA/$MACHINE/rc.local.wifi.stop"
        "$VARIA/networks/vanilla"
        if [ "$2" = "none" ]
        then
          exit
        fi
        "$VARIA/$MACHINE/rc.local.start"
        nohup "$VARIA/networks/cfg-${2}" 1>"$XDG_DATA_HOME/dotfiles/net.log" 2>&1 &
        echo "for debug info, see $XDG_DATA_HOME/dotfiles/net.log"
        ;;
    "reboot" | "restart")
        power reboot
        ;;
    "poweroff" | "shutdown")
        power poweroff
        ;;
    "suspend")
        xscreensaver-command -lock || exit 1
        power suspend || exit 1
        ;;
    "hibernate")
        screens mobile
        power hibernate
        xrandr --auto
        "$HOME/bin/update-xinput"
        ;;
    "fan")
        shift
        fan "$@"
        ;;
    "help")
        help
        ;;
    *)
        echo "Error: unknown command given" 1>&2
        help 1>&2
        exit 1
        ;;
esac
