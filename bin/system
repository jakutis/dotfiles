#!/usr/bin/env bash

CMD="$1"

if [ "$(id -u)" != "0" -a "$CMD" != "brightness" -a "$CMD" != "battery" -a "$CMD" != "keyboard" ]
then
  ARGS="$@"
  if tty --silent
  then
      SUDO="sudo"
  elif [ "$(which kdesu 2>/dev/null)" != "" ]
  then
      SUDO="kdesu"
  else
      SUDO="gksudo"
  fi
  $SUDO -- bash -c "XDG_CONFIG_HOME="$XDG_CONFIG_HOME" XDG_DATA_HOME="$XDG_DATA_HOME" XAUTHORITY="$HOME/.Xauthority" HOME="$HOME" "$0" $ARGS"
  exit
fi

DOTFILES="$(cat "$XDG_CONFIG_HOME/dotfiles/dotfiles")"
VARIA="$(cat "$XDG_CONFIG_HOME/dotfiles/varia")"
MACHINE="$(cat "$XDG_CONFIG_HOME/dotfiles/machine")"

function help {
    echo "Available commands: help hibernate suspend poweroff shutdown reboot restart powersave net screens battery brightness fan"
}

function fan {
  LEVEL="$1"
  if [ -z "$LEVEL" ]
  then
    cat /proc/acpi/ibm/fan
  else
    if [ "$LEVEL" = "off" ]
    then
      LEVEL="0"
    elif [ "$LEVEL" = "low" ]
    then
      LEVEL="2"
    elif [ "$LEVEL" = "medium" ]
    then
      LEVEL="4"
    elif [ "$LEVEL" = "maximum" ]
    then
      LEVEL="7"
    fi
    # LEVEL can be number and auto and disengaged
    echo "level $LEVEL" > /proc/acpi/ibm/fan
  fi
}

function stop {
    "$VARIA/$MACHINE/rc.local.stop"
    "$VARIA/$MACHINE/rc.local.modem.stop"
    "$VARIA/$MACHINE/rc.local.wifi.stop"
}

function power {
    FUNCTION="$1"

    if which systemctl 1>/dev/null 2>&1
    then
        systemctl "$FUNCTION"
    elif which "pm-$FUNCTION" 1>/dev/null 2>&1
    then
        "pm-$FUNCTION"
    else
        "$FUNCTION"
    fi
}

function reset {
    xrandr --auto
    "$HOME/bin/update-xinput"
    "$VARIA/$MACHINE/rc.power"
}

function screens {
    CFG="$1"
    shift

    if [ -f "$DOTFILES/screens.$MACHINE/$CFG" ]
    then
        "$DOTFILES/screens.$MACHINE/$CFG" "$@"
    else
        echo "Configuration is not a preset, parsing the definition"
        SCREEN="${CFG%%:*}"
        POSITION="${CFG#*:}"
        if [ "$POSITION" = "only" ]
        then
          xrandr --output "$SCREEN" --auto $(xrandr|grep connected|sed -e 's/^\([A-Z0-9a-z-]*\) .*$/--output \1 --off /'|grep -v "^--output ${SCREEN}")
        else
          DEFAULT="eDP-1"
          xrandr --output "$DEFAULT" --preferred --primary --auto --output "$SCREEN" --auto "--${POSITION}" "$DEFAULT" $(xrandr|grep connected|sed -e 's/^\([A-Z0-9a-z-]*\) .*$/--output \1 --off /'|grep -v "$SCREEN"|grep -v "$DEFAULT")
        fi
        echo "Existing presets are:" 1>&2
        ls -1 "$DOTFILES/screens.$MACHINE" 1>&2
    fi

    xset s off
    xset s noblank
    xset s 300
}

function brightness {
  DIR="$1"
  ARG="$2"
  if ! [ -d "$DIR" ]
  then
      echo "Symlink $DIR does not exist, please create it, e.g. ln -s /sys/devices/platform/applesmc.768/leds/smc::kbd_backlight \"$DIR\"" 1>&2
      exit 1
  fi
  CURRENT="$(cat "$DIR/brightness")"
  MAX="$(cat "$DIR/max_brightness")"
  MIN="0"
  RANGE=$(($MAX - $MIN))
  STEP=$(($RANGE / 20))

  if [ "$ARG" = "" ]
  then
      echo "$CURRENT"
  elif [ "$ARG" = "more" ]
  then
      echo $(($CURRENT + $STEP)) > "$DIR/brightness"
  elif [ "$ARG" = "less" ]
  then
      echo $(($CURRENT - $STEP)) > "$DIR/brightness"
  elif [ "$ARG" = "max" -o "$ARG" = "maximum" ]
  then
      echo "$MAX" > "$DIR/brightness"
  elif [ "$ARG" = "min" -o "$ARG" = "minimum" ]
  then
      echo "$MIN" > "$DIR/brightness"
  elif [ "${ARG:(-1)}" = "%" ]
  then
      PERCENT="${ARG::-1}"
      echo $(($MIN + $PERCENT * $RANGE / 100)) > "$DIR/brightness"
  else
      echo $ARG > "$DIR/brightness"
  fi
}

if [ -z "$CMD" ]
then
    echo "Error: no command given" 1>&2
    help 1>&2
    exit 1
fi

case "$CMD" in
    "keyboard")
        brightness "$XDG_CONFIG_HOME/dotfiles/keyboard" "$2"
        ;;
    "brightness")
        brightness "$XDG_CONFIG_HOME/dotfiles/brightness" "$2"
        ;;
    "battery")
        BATTERY="$XDG_CONFIG_HOME/dotfiles/battery"
        PREFIX="energy"
        if [ ! -e "$BATTERY/${PREFIX}_full_design" ]
        then
          PREFIX="charge"
        fi
        echo "After purchase: $(cat "$BATTERY/${PREFIX}_full_design")"
        echo "When full:      $(cat "$BATTERY/${PREFIX}_full")"
        echo "Now:            $(cat "$BATTERY/${PREFIX}_now")"
        echo "Mode:           $(cat "$BATTERY/status")"
        ;;
    "screens")
        shift
        screens "$@"
        ;;
    "net")
        "$VARIA/$MACHINE/rc.power"
        "$VARIA/$MACHINE/rc.local.start"
        "$VARIA/$MACHINE/rc.local.modem.stop"
        "$VARIA/$MACHINE/rc.local.wifi.stop"
        nohup "$VARIA/networks/cfg-${2}" 1>"$XDG_DATA_HOME/dotfiles/net.log" 2>&1 &
        echo "for debug info, see $XDG_DATA_HOME/dotfiles/net.log"
        ;;
    "powersave")
        "$VARIA/networks/vanilla"
        "$VARIA/$MACHINE/rc.power"
        stop
        ;;
    "reboot" | "restart")
        stop
        power reboot
        ;;
    "poweroff" | "shutdown")
        stop
        power poweroff
        ;;
    "suspend")
        "$HOME/bin/blank" || exit 1
        xscreensaver-command -lock || exit 1
        power suspend || exit 1
        ;;
    "hibernate")
        screens mobile
        stop
        power hibernate
        reset
        ;;
    "fan")
        shift
        fan "$@"
        ;;
    "help")
        help
        ;;
    *)
        echo "Error: unknown command given" 1>&2
        help 1>&2
        exit 1
        ;;
esac
